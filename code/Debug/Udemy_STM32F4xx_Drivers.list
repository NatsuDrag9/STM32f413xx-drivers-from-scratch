
Udemy_STM32F4xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023dc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002690  08002690  00020490  2**0
                  CONTENTS
  4 .ARM          00000000  08002690  08002690  00020490  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002690  08002690  00020490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000490  20000000  08002698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000490  08002b28  00020490  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08002b28  00020598  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020490  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004643  00000000  00000000  000204ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000abe  00000000  00000000  00024afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  000255c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  00025770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f8b  00000000  00000000  000258c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002cda  00000000  00000000  00029853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c3ae  00000000  00000000  0002c52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000388db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000111c  00000000  00000000  00038930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000490 	.word	0x20000490
 80001fc:	00000000 	.word	0x00000000
 8000200:	080025a4 	.word	0x080025a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000494 	.word	0x20000494
 800021c:	080025a4 	.word	0x080025a4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <delay>:

// Function prototypes
extern void initialise_monitor_handles(void);

// Software delay
void delay(void) {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000/2; i++);
 80002d6:	2300      	movs	r3, #0
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	e002      	b.n	80002e2 <delay+0x12>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3301      	adds	r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <delay+0x28>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d9f8      	bls.n	80002dc <delay+0xc>
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	0003d08f 	.word	0x0003d08f

080002fc <GPIO_Btn_Init>:

// User button GPIO initialization
void GPIO_Btn_Init() {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Btn;

	// user button B1 configuration on PC13
	GPIO_Btn.pGPIOx = GPIOC;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <GPIO_Btn_Init+0x34>)
 8000304:	607b      	str	r3, [r7, #4]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000306:	230d      	movs	r3, #13
 8000308:	723b      	strb	r3, [r7, #8]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800030a:	2300      	movs	r3, #0
 800030c:	727b      	strb	r3, [r7, #9]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800030e:	2302      	movs	r3, #2
 8000310:	72bb      	strb	r3, [r7, #10]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000312:	2300      	movs	r3, #0
 8000314:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClock_Control(GPIOC, ENABLE);
 8000316:	2101      	movs	r1, #1
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <GPIO_Btn_Init+0x34>)
 800031a:	f000 f8ef 	bl	80004fc <GPIO_PeriClock_Control>
	GPIO_Init(&GPIO_Btn);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4618      	mov	r0, r3
 8000322:	f000 f9bb 	bl	800069c <GPIO_Init>
}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40020800 	.word	0x40020800

08000334 <USART6_GPIOInits>:

// USART6 GPIO Initialization
void USART6_GPIOInits() {
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
	GPIO_Handle_t USARTPins;

	USARTPins.pGPIOx = GPIOG;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <USART6_GPIOInits+0x40>)
 800033c:	607b      	str	r3, [r7, #4]
	USARTPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800033e:	2300      	movs	r3, #0
 8000340:	733b      	strb	r3, [r7, #12]
	USARTPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000342:	2301      	movs	r3, #1
 8000344:	72fb      	strb	r3, [r7, #11]
	USARTPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000346:	2302      	movs	r3, #2
 8000348:	727b      	strb	r3, [r7, #9]
	USARTPins.GPIO_PinConfig.GPIO_PinAltFunMode = 8;
 800034a:	2308      	movs	r3, #8
 800034c:	737b      	strb	r3, [r7, #13]
	USARTPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800034e:	2302      	movs	r3, #2
 8000350:	72bb      	strb	r3, [r7, #10]

	// TX pin
	USARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000352:	230e      	movs	r3, #14
 8000354:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f99f 	bl	800069c <GPIO_Init>

	// RX pin
	USARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800035e:	2309      	movs	r3, #9
 8000360:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f999 	bl	800069c <GPIO_Init>
}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021800 	.word	0x40021800

08000378 <USART6_Inits>:

// USART6 initialization
void USART6_Inits(){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	USART6Handle.pUSARTx = USART6;
 800037c:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <USART6_Inits+0x40>)
 800037e:	4a0f      	ldr	r2, [pc, #60]	; (80003bc <USART6_Inits+0x44>)
 8000380:	601a      	str	r2, [r3, #0]
	USART6Handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <USART6_Inits+0x40>)
 8000384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000388:	609a      	str	r2, [r3, #8]
	USART6Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <USART6_Inits+0x40>)
 800038c:	2200      	movs	r2, #0
 800038e:	739a      	strb	r2, [r3, #14]
	USART6Handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <USART6_Inits+0x40>)
 8000392:	2200      	movs	r2, #0
 8000394:	711a      	strb	r2, [r3, #4]
	USART6Handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <USART6_Inits+0x40>)
 8000398:	2200      	movs	r2, #0
 800039a:	735a      	strb	r2, [r3, #13]
	USART6Handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <USART6_Inits+0x40>)
 800039e:	2200      	movs	r2, #0
 80003a0:	73da      	strb	r2, [r3, #15]
	USART6Handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <USART6_Inits+0x40>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	731a      	strb	r2, [r3, #12]
	USART6Handle.USART_Config.USART_OverSampling = USART_OVER_SAMPLING_16;
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <USART6_Inits+0x40>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	741a      	strb	r2, [r3, #16]

	USART_Init(&USART6Handle);
 80003ae:	4802      	ldr	r0, [pc, #8]	; (80003b8 <USART6_Inits+0x40>)
 80003b0:	f000 fdbc 	bl	8000f2c <USART_Init>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000564 	.word	0x20000564
 80003bc:	40011400 	.word	0x40011400

080003c0 <main>:
//void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle, uint8_t AppEvent){
//
//}

int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 80003c6:	f001 f8ed 	bl	80015a4 <initialise_monitor_handles>

	uint8_t btnPressCount = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	71fb      	strb	r3, [r7, #7]

	// initializes the user button GPIO pin
	GPIO_Btn_Init();
 80003ce:	f7ff ff95 	bl	80002fc <GPIO_Btn_Init>

	// configures GPIO pins to USART6
	USART6_GPIOInits();
 80003d2:	f7ff ffaf 	bl	8000334 <USART6_GPIOInits>

	// initializes USART6 configuration
	USART6_Inits();
 80003d6:	f7ff ffcf 	bl	8000378 <USART6_Inits>

	// enable the USART6 peripheral
	USART_PeripheralControl(USART6, ENABLE);
 80003da:	2101      	movs	r1, #1
 80003dc:	4811      	ldr	r0, [pc, #68]	; (8000424 <main+0x64>)
 80003de:	f000 fe4f 	bl	8001080 <USART_PeripheralControl>
//	USART_IRQInterruptConfig(IRQ_NO_USART6_ERR, ENABLE);


	while (1) {
		// exits loop on button press
		while (!(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_PRESSED));
 80003e2:	bf00      	nop
 80003e4:	210d      	movs	r1, #13
 80003e6:	4810      	ldr	r0, [pc, #64]	; (8000428 <main+0x68>)
 80003e8:	f000 faee 	bl	80009c8 <GPIO_ReadFromInputPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d1f8      	bne.n	80003e4 <main+0x24>
		// adds a small delay for debouncing
		delay();
 80003f2:	f7ff ff6d 	bl	80002d0 <delay>
		btnPressCount++;
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	3301      	adds	r3, #1
 80003fa:	71fb      	strb	r3, [r7, #7]
		printf("User pressed button %u\n", btnPressCount);
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4619      	mov	r1, r3
 8000400:	480a      	ldr	r0, [pc, #40]	; (800042c <main+0x6c>)
 8000402:	f001 facf 	bl	80019a4 <iprintf>

		// send data
		USART_SendData(&USART6Handle, (uint8_t*)someText, strlen(someText));
 8000406:	480a      	ldr	r0, [pc, #40]	; (8000430 <main+0x70>)
 8000408:	f7ff ff0a 	bl	8000220 <strlen>
 800040c:	4603      	mov	r3, r0
 800040e:	461a      	mov	r2, r3
 8000410:	4907      	ldr	r1, [pc, #28]	; (8000430 <main+0x70>)
 8000412:	4808      	ldr	r0, [pc, #32]	; (8000434 <main+0x74>)
 8000414:	f000 fe4f 	bl	80010b6 <USART_SendData>
		printf("Sent %s\n", someText);
 8000418:	4905      	ldr	r1, [pc, #20]	; (8000430 <main+0x70>)
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <main+0x78>)
 800041c:	f001 fac2 	bl	80019a4 <iprintf>
		while (!(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_PRESSED));
 8000420:	e7df      	b.n	80003e2 <main+0x22>
 8000422:	bf00      	nop
 8000424:	40011400 	.word	0x40011400
 8000428:	40020800 	.word	0x40020800
 800042c:	080025bc 	.word	0x080025bc
 8000430:	20000000 	.word	0x20000000
 8000434:	20000564 	.word	0x20000564
 8000438:	080025d4 	.word	0x080025d4

0800043c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000444:	4a14      	ldr	r2, [pc, #80]	; (8000498 <_sbrk+0x5c>)
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <_sbrk+0x60>)
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <_sbrk+0x64>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d102      	bne.n	800045e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <_sbrk+0x64>)
 800045a:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <_sbrk+0x68>)
 800045c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <_sbrk+0x64>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	693a      	ldr	r2, [r7, #16]
 8000468:	429a      	cmp	r2, r3
 800046a:	d207      	bcs.n	800047c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800046c:	f001 f914 	bl	8001698 <__errno>
 8000470:	4603      	mov	r3, r0
 8000472:	220c      	movs	r2, #12
 8000474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800047a:	e009      	b.n	8000490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <_sbrk+0x64>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000482:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <_sbrk+0x64>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4413      	add	r3, r2
 800048a:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <_sbrk+0x64>)
 800048c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800048e:	68fb      	ldr	r3, [r7, #12]
}
 8000490:	4618      	mov	r0, r3
 8000492:	3718      	adds	r7, #24
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20050000 	.word	0x20050000
 800049c:	00000400 	.word	0x00000400
 80004a0:	200004ac 	.word	0x200004ac
 80004a4:	20000598 	.word	0x20000598

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	; (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	; (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d6:	f001 f9db 	bl	8001890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f7ff ff71 	bl	80003c0 <main>

080004de <LoopForever>:

LoopForever:
    b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   r0, =_estack
 80004e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000490 	.word	0x20000490
  ldr r2, =_sidata
 80004ec:	08002698 	.word	0x08002698
  ldr r2, =_sbss
 80004f0:	20000490 	.word	0x20000490
  ldr r4, =_ebss
 80004f4:	20000598 	.word	0x20000598

080004f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC_IRQHandler>
	...

080004fc <GPIO_PeriClock_Control>:
 * @return					- none
 *
 * @Note					- none
 *
 */
void GPIO_PeriClock_Control(GPIO_RegDef_t* pGPIOx, uint8_t EnorDi){
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000508:	78fb      	ldrb	r3, [r7, #3]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d157      	bne.n	80005be <GPIO_PeriClock_Control+0xc2>
		if (pGPIOx == GPIOA) {
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a59      	ldr	r2, [pc, #356]	; (8000678 <GPIO_PeriClock_Control+0x17c>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d106      	bne.n	8000524 <GPIO_PeriClock_Control+0x28>
			GPIOA_PCLK_EN();
 8000516:	4b59      	ldr	r3, [pc, #356]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a58      	ldr	r2, [pc, #352]	; (800067c <GPIO_PeriClock_Control+0x180>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 8000522:	e0a3      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOB) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a56      	ldr	r2, [pc, #344]	; (8000680 <GPIO_PeriClock_Control+0x184>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d106      	bne.n	800053a <GPIO_PeriClock_Control+0x3e>
			GPIOB_PCLK_EN();
 800052c:	4b53      	ldr	r3, [pc, #332]	; (800067c <GPIO_PeriClock_Control+0x180>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	4a52      	ldr	r2, [pc, #328]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000532:	f043 0302 	orr.w	r3, r3, #2
 8000536:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000538:	e098      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOC) {
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a51      	ldr	r2, [pc, #324]	; (8000684 <GPIO_PeriClock_Control+0x188>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d106      	bne.n	8000550 <GPIO_PeriClock_Control+0x54>
			GPIOC_PCLK_EN();
 8000542:	4b4e      	ldr	r3, [pc, #312]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a4d      	ldr	r2, [pc, #308]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054e:	e08d      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOD) {
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a4d      	ldr	r2, [pc, #308]	; (8000688 <GPIO_PeriClock_Control+0x18c>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d106      	bne.n	8000566 <GPIO_PeriClock_Control+0x6a>
			GPIOD_PCLK_EN();
 8000558:	4b48      	ldr	r3, [pc, #288]	; (800067c <GPIO_PeriClock_Control+0x180>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055c:	4a47      	ldr	r2, [pc, #284]	; (800067c <GPIO_PeriClock_Control+0x180>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000564:	e082      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOE) {
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a48      	ldr	r2, [pc, #288]	; (800068c <GPIO_PeriClock_Control+0x190>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d106      	bne.n	800057c <GPIO_PeriClock_Control+0x80>
			GPIOE_PCLK_EN();
 800056e:	4b43      	ldr	r3, [pc, #268]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a42      	ldr	r2, [pc, #264]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000574:	f043 0310 	orr.w	r3, r3, #16
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057a:	e077      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOF) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a44      	ldr	r2, [pc, #272]	; (8000690 <GPIO_PeriClock_Control+0x194>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d106      	bne.n	8000592 <GPIO_PeriClock_Control+0x96>
			GPIOF_PCLK_EN();
 8000584:	4b3d      	ldr	r3, [pc, #244]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	4a3c      	ldr	r2, [pc, #240]	; (800067c <GPIO_PeriClock_Control+0x180>)
 800058a:	f043 0320 	orr.w	r3, r3, #32
 800058e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000590:	e06c      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOG) {
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a3f      	ldr	r2, [pc, #252]	; (8000694 <GPIO_PeriClock_Control+0x198>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d106      	bne.n	80005a8 <GPIO_PeriClock_Control+0xac>
			GPIOG_PCLK_EN();
 800059a:	4b38      	ldr	r3, [pc, #224]	; (800067c <GPIO_PeriClock_Control+0x180>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a37      	ldr	r2, [pc, #220]	; (800067c <GPIO_PeriClock_Control+0x180>)
 80005a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a6:	e061      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOH) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a3b      	ldr	r2, [pc, #236]	; (8000698 <GPIO_PeriClock_Control+0x19c>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d15d      	bne.n	800066c <GPIO_PeriClock_Control+0x170>
			GPIOH_PCLK_EN();
 80005b0:	4b32      	ldr	r3, [pc, #200]	; (800067c <GPIO_PeriClock_Control+0x180>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b4:	4a31      	ldr	r2, [pc, #196]	; (800067c <GPIO_PeriClock_Control+0x180>)
 80005b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005bc:	e056      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		if (pGPIOx == GPIOA) {
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a2d      	ldr	r2, [pc, #180]	; (8000678 <GPIO_PeriClock_Control+0x17c>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d106      	bne.n	80005d4 <GPIO_PeriClock_Control+0xd8>
			GPIOA_PCLK_DI();
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <GPIO_PeriClock_Control+0x180>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <GPIO_PeriClock_Control+0x180>)
 80005cc:	f023 0301 	bic.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d2:	e04b      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOB) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a2a      	ldr	r2, [pc, #168]	; (8000680 <GPIO_PeriClock_Control+0x184>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d106      	bne.n	80005ea <GPIO_PeriClock_Control+0xee>
			GPIOB_PCLK_DI();
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <GPIO_PeriClock_Control+0x180>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	4a26      	ldr	r2, [pc, #152]	; (800067c <GPIO_PeriClock_Control+0x180>)
 80005e2:	f023 0302 	bic.w	r3, r3, #2
 80005e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e8:	e040      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOC) {
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a25      	ldr	r2, [pc, #148]	; (8000684 <GPIO_PeriClock_Control+0x188>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d106      	bne.n	8000600 <GPIO_PeriClock_Control+0x104>
			GPIOC_PCLK_DI();
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <GPIO_PeriClock_Control+0x180>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a21      	ldr	r2, [pc, #132]	; (800067c <GPIO_PeriClock_Control+0x180>)
 80005f8:	f023 0304 	bic.w	r3, r3, #4
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005fe:	e035      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOD) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a21      	ldr	r2, [pc, #132]	; (8000688 <GPIO_PeriClock_Control+0x18c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d106      	bne.n	8000616 <GPIO_PeriClock_Control+0x11a>
			GPIOD_PCLK_DI();
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <GPIO_PeriClock_Control+0x180>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <GPIO_PeriClock_Control+0x180>)
 800060e:	f023 0308 	bic.w	r3, r3, #8
 8000612:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000614:	e02a      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOE) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a1c      	ldr	r2, [pc, #112]	; (800068c <GPIO_PeriClock_Control+0x190>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d106      	bne.n	800062c <GPIO_PeriClock_Control+0x130>
			GPIOE_PCLK_DI();
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a16      	ldr	r2, [pc, #88]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000624:	f023 0310 	bic.w	r3, r3, #16
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062a:	e01f      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOF) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <GPIO_PeriClock_Control+0x194>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d106      	bne.n	8000642 <GPIO_PeriClock_Control+0x146>
			GPIOF_PCLK_DI();
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4a10      	ldr	r2, [pc, #64]	; (800067c <GPIO_PeriClock_Control+0x180>)
 800063a:	f023 0320 	bic.w	r3, r3, #32
 800063e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000640:	e014      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOG) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <GPIO_PeriClock_Control+0x198>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d106      	bne.n	8000658 <GPIO_PeriClock_Control+0x15c>
			GPIOG_PCLK_DI();
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <GPIO_PeriClock_Control+0x180>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a0b      	ldr	r2, [pc, #44]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000656:	e009      	b.n	800066c <GPIO_PeriClock_Control+0x170>
		else if (pGPIOx == GPIOH) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <GPIO_PeriClock_Control+0x19c>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d105      	bne.n	800066c <GPIO_PeriClock_Control+0x170>
			GPIOH_PCLK_DI();
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <GPIO_PeriClock_Control+0x180>)
 8000666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40020000 	.word	0x40020000
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00
 800068c:	40021000 	.word	0x40021000
 8000690:	40021400 	.word	0x40021400
 8000694:	40021800 	.word	0x40021800
 8000698:	40021c00 	.word	0x40021c00

0800069c <GPIO_Init>:
 * @return					- none
 *
 * @Note					- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;	// temporary register
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
	uint8_t pinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	74fb      	strb	r3, [r7, #19]
	uint8_t pinMode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	795b      	ldrb	r3, [r3, #5]
 80006b2:	74bb      	strb	r3, [r7, #18]
	uint8_t pinSpeed = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	799b      	ldrb	r3, [r3, #6]
 80006b8:	747b      	strb	r3, [r7, #17]
	uint8_t pupdControl = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	79db      	ldrb	r3, [r3, #7]
 80006be:	743b      	strb	r3, [r7, #16]
	uint8_t opType = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7a1b      	ldrb	r3, [r3, #8]
 80006c4:	73fb      	strb	r3, [r7, #15]
	uint8_t altFunMode = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7a5b      	ldrb	r3, [r3, #9]
 80006ca:	73bb      	strb	r3, [r7, #14]

	// Enabling GPIO PCLK
	GPIO_PeriClock_Control(pGPIOHandle->pGPIOx, ENABLE);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2101      	movs	r1, #1
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff12 	bl	80004fc <GPIO_PeriClock_Control>

	// configure the mode of the GPIO pin
	if (pinMode <= GPIO_MODE_ANALOG) {
 80006d8:	7cbb      	ldrb	r3, [r7, #18]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d81c      	bhi.n	8000718 <GPIO_Init+0x7c>
		// non-interrupt mode
		temp = pinMode << (2*pinNumber);	// each pin takes two bit fields
 80006de:	7cba      	ldrb	r2, [r7, #18]
 80006e0:	7cfb      	ldrb	r3, [r7, #19]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	fa02 f303 	lsl.w	r3, r2, r3
 80006e8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pinNumber));	// clears bit fields
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	7cfb      	ldrb	r3, [r7, #19]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	2103      	movs	r1, #3
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	400a      	ands	r2, r1
 8000704:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// sets the bit fields
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	6819      	ldr	r1, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	430a      	orrs	r2, r1
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	e0ae      	b.n	8000876 <GPIO_Init+0x1da>
	}
	else {
		// interrupt mode
		if(pinMode == GPIO_MODE_IT_FT) {
 8000718:	7cbb      	ldrb	r3, [r7, #18]
 800071a:	2b04      	cmp	r3, #4
 800071c:	d115      	bne.n	800074a <GPIO_Init+0xae>
			// configure interrupt in FTSR
			EXTI->FTSR |= (1 << pinNumber);
 800071e:	4b9f      	ldr	r3, [pc, #636]	; (800099c <GPIO_Init+0x300>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	7cfa      	ldrb	r2, [r7, #19]
 8000724:	2101      	movs	r1, #1
 8000726:	fa01 f202 	lsl.w	r2, r1, r2
 800072a:	4611      	mov	r1, r2
 800072c:	4a9b      	ldr	r2, [pc, #620]	; (800099c <GPIO_Init+0x300>)
 800072e:	430b      	orrs	r3, r1
 8000730:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pinNumber);	// clears the corresponding RTSR bit
 8000732:	4b9a      	ldr	r3, [pc, #616]	; (800099c <GPIO_Init+0x300>)
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	7cfa      	ldrb	r2, [r7, #19]
 8000738:	2101      	movs	r1, #1
 800073a:	fa01 f202 	lsl.w	r2, r1, r2
 800073e:	43d2      	mvns	r2, r2
 8000740:	4611      	mov	r1, r2
 8000742:	4a96      	ldr	r2, [pc, #600]	; (800099c <GPIO_Init+0x300>)
 8000744:	400b      	ands	r3, r1
 8000746:	6093      	str	r3, [r2, #8]
 8000748:	e02f      	b.n	80007aa <GPIO_Init+0x10e>
		}
		else if (pinMode == GPIO_MODE_IT_RT) {
 800074a:	7cbb      	ldrb	r3, [r7, #18]
 800074c:	2b05      	cmp	r3, #5
 800074e:	d115      	bne.n	800077c <GPIO_Init+0xe0>
			// configure interrupt in RTSR
			EXTI->RTSR |= (1 << pinNumber);
 8000750:	4b92      	ldr	r3, [pc, #584]	; (800099c <GPIO_Init+0x300>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	7cfa      	ldrb	r2, [r7, #19]
 8000756:	2101      	movs	r1, #1
 8000758:	fa01 f202 	lsl.w	r2, r1, r2
 800075c:	4611      	mov	r1, r2
 800075e:	4a8f      	ldr	r2, [pc, #572]	; (800099c <GPIO_Init+0x300>)
 8000760:	430b      	orrs	r3, r1
 8000762:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pinNumber);	// clears the corresponding FTSR bit
 8000764:	4b8d      	ldr	r3, [pc, #564]	; (800099c <GPIO_Init+0x300>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	7cfa      	ldrb	r2, [r7, #19]
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f202 	lsl.w	r2, r1, r2
 8000770:	43d2      	mvns	r2, r2
 8000772:	4611      	mov	r1, r2
 8000774:	4a89      	ldr	r2, [pc, #548]	; (800099c <GPIO_Init+0x300>)
 8000776:	400b      	ands	r3, r1
 8000778:	60d3      	str	r3, [r2, #12]
 800077a:	e016      	b.n	80007aa <GPIO_Init+0x10e>
		}
		else if (pinMode == GPIO_MODE_IT_RFT) {
 800077c:	7cbb      	ldrb	r3, [r7, #18]
 800077e:	2b06      	cmp	r3, #6
 8000780:	d113      	bne.n	80007aa <GPIO_Init+0x10e>
			// configure interrupt during both RTSR and FTSR
			EXTI->FTSR |= (1 << pinNumber);
 8000782:	4b86      	ldr	r3, [pc, #536]	; (800099c <GPIO_Init+0x300>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	7cfa      	ldrb	r2, [r7, #19]
 8000788:	2101      	movs	r1, #1
 800078a:	fa01 f202 	lsl.w	r2, r1, r2
 800078e:	4611      	mov	r1, r2
 8000790:	4a82      	ldr	r2, [pc, #520]	; (800099c <GPIO_Init+0x300>)
 8000792:	430b      	orrs	r3, r1
 8000794:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pinNumber);
 8000796:	4b81      	ldr	r3, [pc, #516]	; (800099c <GPIO_Init+0x300>)
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	7cfa      	ldrb	r2, [r7, #19]
 800079c:	2101      	movs	r1, #1
 800079e:	fa01 f202 	lsl.w	r2, r1, r2
 80007a2:	4611      	mov	r1, r2
 80007a4:	4a7d      	ldr	r2, [pc, #500]	; (800099c <GPIO_Init+0x300>)
 80007a6:	430b      	orrs	r3, r1
 80007a8:	6093      	str	r3, [r2, #8]
		}

		// configure the GPIO port in SYSCFG_EXTICRx (x = 1, 2, 3, 4.)
		uint8_t temp1 = 0, temp2 = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	737b      	strb	r3, [r7, #13]
 80007ae:	2300      	movs	r3, #0
 80007b0:	733b      	strb	r3, [r7, #12]
		uint8_t portCode = GPIO_BASEADDR_TO_PORT_CODE(pGPIOHandle->pGPIOx);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a7a      	ldr	r2, [pc, #488]	; (80009a0 <GPIO_Init+0x304>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d032      	beq.n	8000822 <GPIO_Init+0x186>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a78      	ldr	r2, [pc, #480]	; (80009a4 <GPIO_Init+0x308>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d02b      	beq.n	800081e <GPIO_Init+0x182>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a77      	ldr	r2, [pc, #476]	; (80009a8 <GPIO_Init+0x30c>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d024      	beq.n	800081a <GPIO_Init+0x17e>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a75      	ldr	r2, [pc, #468]	; (80009ac <GPIO_Init+0x310>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d01d      	beq.n	8000816 <GPIO_Init+0x17a>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a74      	ldr	r2, [pc, #464]	; (80009b0 <GPIO_Init+0x314>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d016      	beq.n	8000812 <GPIO_Init+0x176>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a72      	ldr	r2, [pc, #456]	; (80009b4 <GPIO_Init+0x318>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d00f      	beq.n	800080e <GPIO_Init+0x172>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a71      	ldr	r2, [pc, #452]	; (80009b8 <GPIO_Init+0x31c>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d008      	beq.n	800080a <GPIO_Init+0x16e>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a6f      	ldr	r2, [pc, #444]	; (80009bc <GPIO_Init+0x320>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d101      	bne.n	8000806 <GPIO_Init+0x16a>
 8000802:	2307      	movs	r3, #7
 8000804:	e00e      	b.n	8000824 <GPIO_Init+0x188>
 8000806:	2300      	movs	r3, #0
 8000808:	e00c      	b.n	8000824 <GPIO_Init+0x188>
 800080a:	2306      	movs	r3, #6
 800080c:	e00a      	b.n	8000824 <GPIO_Init+0x188>
 800080e:	2305      	movs	r3, #5
 8000810:	e008      	b.n	8000824 <GPIO_Init+0x188>
 8000812:	2304      	movs	r3, #4
 8000814:	e006      	b.n	8000824 <GPIO_Init+0x188>
 8000816:	2303      	movs	r3, #3
 8000818:	e004      	b.n	8000824 <GPIO_Init+0x188>
 800081a:	2302      	movs	r3, #2
 800081c:	e002      	b.n	8000824 <GPIO_Init+0x188>
 800081e:	2301      	movs	r3, #1
 8000820:	e000      	b.n	8000824 <GPIO_Init+0x188>
 8000822:	2300      	movs	r3, #0
 8000824:	72fb      	strb	r3, [r7, #11]
		temp1 = pinNumber/4;
 8000826:	7cfb      	ldrb	r3, [r7, #19]
 8000828:	089b      	lsrs	r3, r3, #2
 800082a:	737b      	strb	r3, [r7, #13]
		temp2 = pinNumber%4;
 800082c:	7cfb      	ldrb	r3, [r7, #19]
 800082e:	f003 0303 	and.w	r3, r3, #3
 8000832:	733b      	strb	r3, [r7, #12]
		SYSCFG_PCLK_EN();
 8000834:	4b62      	ldr	r3, [pc, #392]	; (80009c0 <GPIO_Init+0x324>)
 8000836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000838:	4a61      	ldr	r2, [pc, #388]	; (80009c0 <GPIO_Init+0x324>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= portCode << (4*temp2);
 8000840:	4a60      	ldr	r2, [pc, #384]	; (80009c4 <GPIO_Init+0x328>)
 8000842:	7b7b      	ldrb	r3, [r7, #13]
 8000844:	3302      	adds	r3, #2
 8000846:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084a:	7af9      	ldrb	r1, [r7, #11]
 800084c:	7b3b      	ldrb	r3, [r7, #12]
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	fa01 f303 	lsl.w	r3, r1, r3
 8000854:	4618      	mov	r0, r3
 8000856:	495b      	ldr	r1, [pc, #364]	; (80009c4 <GPIO_Init+0x328>)
 8000858:	7b7b      	ldrb	r3, [r7, #13]
 800085a:	4302      	orrs	r2, r0
 800085c:	3302      	adds	r3, #2
 800085e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// enable the EXTI interrupt delivery using interrupt mask register (IMR)
		EXTI->IMR |= (1 << pinNumber);
 8000862:	4b4e      	ldr	r3, [pc, #312]	; (800099c <GPIO_Init+0x300>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	7cfa      	ldrb	r2, [r7, #19]
 8000868:	2101      	movs	r1, #1
 800086a:	fa01 f202 	lsl.w	r2, r1, r2
 800086e:	4611      	mov	r1, r2
 8000870:	4a4a      	ldr	r2, [pc, #296]	; (800099c <GPIO_Init+0x300>)
 8000872:	430b      	orrs	r3, r1
 8000874:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]

	// configure the speed
	temp = pinSpeed << (2*pinNumber);
 800087a:	7c7a      	ldrb	r2, [r7, #17]
 800087c:	7cfb      	ldrb	r3, [r7, #19]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pinNumber));	// clears bit fields
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	7cfb      	ldrb	r3, [r7, #19]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	2103      	movs	r1, #3
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	4619      	mov	r1, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	400a      	ands	r2, r1
 80008a0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; // sets the bit fields
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6899      	ldr	r1, [r3, #8]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	609a      	str	r2, [r3, #8]

	temp = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

	// configure the pupd settings
	temp = pupdControl << (2*pinNumber);
 80008b6:	7c3a      	ldrb	r2, [r7, #16]
 80008b8:	7cfb      	ldrb	r3, [r7, #19]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pinNumber));	// clears bit fields
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	7cfb      	ldrb	r3, [r7, #19]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2103      	movs	r1, #3
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	4619      	mov	r1, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	400a      	ands	r2, r1
 80008dc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; // sets the bit fields
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68d9      	ldr	r1, [r3, #12]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	430a      	orrs	r2, r1
 80008ec:	60da      	str	r2, [r3, #12]

	temp = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]

	// configure the optype
	temp = opType << pinNumber;
 80008f2:	7bfa      	ldrb	r2, [r7, #15]
 80008f4:	7cfb      	ldrb	r3, [r7, #19]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pinNumber);	// clears bit fields
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	7cfb      	ldrb	r3, [r7, #19]
 8000904:	2101      	movs	r1, #1
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	4619      	mov	r1, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	400a      	ands	r2, r1
 8000914:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; // sets the bit fields
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6859      	ldr	r1, [r3, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	430a      	orrs	r2, r1
 8000924:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

	if (pinMode == GPIO_MODE_ALTFN){
 800092a:	7cbb      	ldrb	r3, [r7, #18]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d131      	bne.n	8000994 <GPIO_Init+0x2f8>
		// configure the alt functions
		uint8_t temp1 = 0, temp2 = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	72bb      	strb	r3, [r7, #10]
 8000934:	2300      	movs	r3, #0
 8000936:	727b      	strb	r3, [r7, #9]
		temp1 = pinNumber/8;
 8000938:	7cfb      	ldrb	r3, [r7, #19]
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	72bb      	strb	r3, [r7, #10]
		temp2 = pinNumber%8;
 800093e:	7cfb      	ldrb	r3, [r7, #19]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	727b      	strb	r3, [r7, #9]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*pinNumber));	// clears bit fields
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	7aba      	ldrb	r2, [r7, #10]
 800094c:	3208      	adds	r2, #8
 800094e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000952:	7cfb      	ldrb	r3, [r7, #19]
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	220f      	movs	r2, #15
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	7aba      	ldrb	r2, [r7, #10]
 8000966:	4001      	ands	r1, r0
 8000968:	3208      	adds	r2, #8
 800096a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= altFunMode << (4*temp2);	// sets the bit fields
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	7aba      	ldrb	r2, [r7, #10]
 8000974:	3208      	adds	r2, #8
 8000976:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800097a:	7bba      	ldrb	r2, [r7, #14]
 800097c:	7a7b      	ldrb	r3, [r7, #9]
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	4618      	mov	r0, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	7aba      	ldrb	r2, [r7, #10]
 800098c:	4301      	orrs	r1, r0
 800098e:	3208      	adds	r2, #8
 8000990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40013c00 	.word	0x40013c00
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40021400 	.word	0x40021400
 80009b8:	40021800 	.word	0x40021800
 80009bc:	40021c00 	.word	0x40021c00
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40013800 	.word	0x40013800

080009c8 <GPIO_ReadFromInputPin>:
 * @return					- pin value
 *
 * @Note					- none
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	691a      	ldr	r2, [r3, #16]
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	fa22 f303 	lsr.w	r3, r2, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	73fb      	strb	r3, [r7, #15]
	return value;
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <RCC_GetPLLOutputClock>:
uint16_t AHB_PreScalar[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB1_PreScalar[4] = {2, 4, 8, 16};
uint16_t APB2_PreScalar[4] = {2, 4, 8, 16};

/* Not implemented */
uint32_t RCC_GetPLLOutputClock(void) {
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
	uint32_t pllClock = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]

	return pllClock;
 8000a00:	687b      	ldr	r3, [r7, #4]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <RCC_GetPCLK1Value>:
 *
 * @Note					- The process of computing pclk1 is taken from
 *							- the clock block diagram in STM32F4XX_RM
 *
 */
uint32_t RCC_GetPCLK1Value(void){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
	uint32_t pclk1 = 0, systemClk = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
	uint8_t clkSource = 0, temp = 0, ahbPrescalar = 0, apb1Prescalar = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	70fb      	strb	r3, [r7, #3]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	70bb      	strb	r3, [r7, #2]
 8000a22:	2300      	movs	r3, #0
 8000a24:	72fb      	strb	r3, [r7, #11]
 8000a26:	2300      	movs	r3, #0
 8000a28:	72bb      	strb	r3, [r7, #10]

	clkSource = ((RCC->CFGR >> 2) & 0x03);
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <RCC_GetPCLK1Value+0xb8>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	70fb      	strb	r3, [r7, #3]

	if (clkSource == 0) {
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d102      	bne.n	8000a44 <RCC_GetPCLK1Value+0x38>
		systemClk = 16000000;	// HSI ==> 16 MHz
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <RCC_GetPCLK1Value+0xbc>)
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	e00b      	b.n	8000a5c <RCC_GetPCLK1Value+0x50>
	}
	else if (clkSource == 1) {
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d102      	bne.n	8000a50 <RCC_GetPCLK1Value+0x44>
		systemClk = 8000000;	// HSE ==> 8 MHz
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <RCC_GetPCLK1Value+0xc0>)
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e005      	b.n	8000a5c <RCC_GetPCLK1Value+0x50>
	}
	else if (clkSource == 2)
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d102      	bne.n	8000a5c <RCC_GetPCLK1Value+0x50>
	{
		systemClk = RCC_GetPLLOutputClock();
 8000a56:	f7ff ffce 	bl	80009f6 <RCC_GetPLLOutputClock>
 8000a5a:	60f8      	str	r0, [r7, #12]
	}

	// gets AHB Prescalar
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <RCC_GetPCLK1Value+0xb8>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	091b      	lsrs	r3, r3, #4
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f003 030f 	and.w	r3, r3, #15
 8000a68:	70bb      	strb	r3, [r7, #2]
	if (temp < 8) {
 8000a6a:	78bb      	ldrb	r3, [r7, #2]
 8000a6c:	2b07      	cmp	r3, #7
 8000a6e:	d802      	bhi.n	8000a76 <RCC_GetPCLK1Value+0x6a>
		ahbPrescalar = 1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	72fb      	strb	r3, [r7, #11]
 8000a74:	e005      	b.n	8000a82 <RCC_GetPCLK1Value+0x76>
	}
	else {
		ahbPrescalar = AHB_PreScalar[temp-8];
 8000a76:	78bb      	ldrb	r3, [r7, #2]
 8000a78:	3b08      	subs	r3, #8
 8000a7a:	4a15      	ldr	r2, [pc, #84]	; (8000ad0 <RCC_GetPCLK1Value+0xc4>)
 8000a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a80:	72fb      	strb	r3, [r7, #11]
	}

	// gets APB1 Prescalar
	temp = ((RCC->CFGR >> 10) & 0x07);
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <RCC_GetPCLK1Value+0xb8>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	0a9b      	lsrs	r3, r3, #10
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	70bb      	strb	r3, [r7, #2]
	if (temp < 4) {
 8000a90:	78bb      	ldrb	r3, [r7, #2]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d802      	bhi.n	8000a9c <RCC_GetPCLK1Value+0x90>
		apb1Prescalar = 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	72bb      	strb	r3, [r7, #10]
 8000a9a:	e005      	b.n	8000aa8 <RCC_GetPCLK1Value+0x9c>
	}
	else {
		apb1Prescalar = APB1_PreScalar[temp-4];
 8000a9c:	78bb      	ldrb	r3, [r7, #2]
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	4a0c      	ldr	r2, [pc, #48]	; (8000ad4 <RCC_GetPCLK1Value+0xc8>)
 8000aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aa6:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (systemClk / ahbPrescalar) / apb1Prescalar;
 8000aa8:	7afb      	ldrb	r3, [r7, #11]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ab0:	7abb      	ldrb	r3, [r7, #10]
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	00f42400 	.word	0x00f42400
 8000acc:	007a1200 	.word	0x007a1200
 8000ad0:	20000404 	.word	0x20000404
 8000ad4:	20000414 	.word	0x20000414

08000ad8 <RCC_GetPCLK2Value>:
 *
 * @Note					- The process of computing pclk1 is taken from
 *							- the clock block diagram in STM32F4XX_RM
 *
 */
uint32_t RCC_GetPCLK2Value(void){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
	uint32_t pclk2 = 0, systemClk = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
	uint8_t clkSource = 0, temp = 0, ahbPrescalar = 0, apb2Prescalar = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	70fb      	strb	r3, [r7, #3]
 8000aea:	2300      	movs	r3, #0
 8000aec:	70bb      	strb	r3, [r7, #2]
 8000aee:	2300      	movs	r3, #0
 8000af0:	72fb      	strb	r3, [r7, #11]
 8000af2:	2300      	movs	r3, #0
 8000af4:	72bb      	strb	r3, [r7, #10]

	clkSource = ((RCC->CFGR >> 2) & 0x03);
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <RCC_GetPCLK2Value+0xb8>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f003 0303 	and.w	r3, r3, #3
 8000b02:	70fb      	strb	r3, [r7, #3]

	if (clkSource == 0) {
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d102      	bne.n	8000b10 <RCC_GetPCLK2Value+0x38>
		systemClk = 16000000;	// HSI ==> 16 MHz
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <RCC_GetPCLK2Value+0xbc>)
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	e00b      	b.n	8000b28 <RCC_GetPCLK2Value+0x50>
	}
	else if (clkSource == 1) {
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d102      	bne.n	8000b1c <RCC_GetPCLK2Value+0x44>
		systemClk = 8000000;	// HSE ==> 8 MHz
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <RCC_GetPCLK2Value+0xc0>)
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	e005      	b.n	8000b28 <RCC_GetPCLK2Value+0x50>
	}
	else if (clkSource == 2)
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d102      	bne.n	8000b28 <RCC_GetPCLK2Value+0x50>
	{
		systemClk = RCC_GetPLLOutputClock();
 8000b22:	f7ff ff68 	bl	80009f6 <RCC_GetPLLOutputClock>
 8000b26:	60f8      	str	r0, [r7, #12]
	}

	// gets AHB Prescalar
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <RCC_GetPCLK2Value+0xb8>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	091b      	lsrs	r3, r3, #4
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f003 030f 	and.w	r3, r3, #15
 8000b34:	70bb      	strb	r3, [r7, #2]
	if (temp < 8) {
 8000b36:	78bb      	ldrb	r3, [r7, #2]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	d802      	bhi.n	8000b42 <RCC_GetPCLK2Value+0x6a>
		ahbPrescalar = 1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	72fb      	strb	r3, [r7, #11]
 8000b40:	e005      	b.n	8000b4e <RCC_GetPCLK2Value+0x76>
	}
	else {
		ahbPrescalar = AHB_PreScalar[temp-8];
 8000b42:	78bb      	ldrb	r3, [r7, #2]
 8000b44:	3b08      	subs	r3, #8
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <RCC_GetPCLK2Value+0xc4>)
 8000b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4c:	72fb      	strb	r3, [r7, #11]
	}

	// gets APB2 Prescalar
	temp = ((RCC->CFGR >> 13) & 0x07);
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <RCC_GetPCLK2Value+0xb8>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	0b5b      	lsrs	r3, r3, #13
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	70bb      	strb	r3, [r7, #2]
	if (temp < 4) {
 8000b5c:	78bb      	ldrb	r3, [r7, #2]
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d802      	bhi.n	8000b68 <RCC_GetPCLK2Value+0x90>
		apb2Prescalar = 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	72bb      	strb	r3, [r7, #10]
 8000b66:	e005      	b.n	8000b74 <RCC_GetPCLK2Value+0x9c>
	}
	else {
		apb2Prescalar = APB2_PreScalar[temp-4];
 8000b68:	78bb      	ldrb	r3, [r7, #2]
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <RCC_GetPCLK2Value+0xc8>)
 8000b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b72:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (systemClk / ahbPrescalar) / apb2Prescalar;
 8000b74:	7afb      	ldrb	r3, [r7, #11]
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b7c:	7abb      	ldrb	r3, [r7, #10]
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	607b      	str	r3, [r7, #4]

	return pclk2;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	00f42400 	.word	0x00f42400
 8000b98:	007a1200 	.word	0x007a1200
 8000b9c:	20000404 	.word	0x20000404
 8000ba0:	2000041c 	.word	0x2000041c

08000ba4 <USART_PeriClock_Control>:
 * @return					- none
 *
 * @Note					- none
 *
 */
void USART_PeriClock_Control(USART_RegDef_t* pUSARTx, uint8_t EnorDi) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d16d      	bne.n	8000c92 <USART_PeriClock_Control+0xee>
		if (pUSARTx == USART1) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a6f      	ldr	r2, [pc, #444]	; (8000d78 <USART_PeriClock_Control+0x1d4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d106      	bne.n	8000bcc <USART_PeriClock_Control+0x28>
			USART1_PCLK_EN();
 8000bbe:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a6e      	ldr	r2, [pc, #440]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if (pUSARTx == UART10){
			UART10_PCLK_DI();
		}
	}
}
 8000bca:	e0cf      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == USART2) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a6c      	ldr	r2, [pc, #432]	; (8000d80 <USART_PeriClock_Control+0x1dc>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d106      	bne.n	8000be2 <USART_PeriClock_Control+0x3e>
			USART2_PCLK_EN();
 8000bd4:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a68      	ldr	r2, [pc, #416]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000be0:	e0c4      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == USART3) {
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a67      	ldr	r2, [pc, #412]	; (8000d84 <USART_PeriClock_Control+0x1e0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d106      	bne.n	8000bf8 <USART_PeriClock_Control+0x54>
			USART3_PCLK_EN();
 8000bea:	4b64      	ldr	r3, [pc, #400]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a63      	ldr	r2, [pc, #396]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bf6:	e0b9      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == USART6) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a63      	ldr	r2, [pc, #396]	; (8000d88 <USART_PeriClock_Control+0x1e4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d106      	bne.n	8000c0e <USART_PeriClock_Control+0x6a>
			USART6_PCLK_EN();
 8000c00:	4b5e      	ldr	r3, [pc, #376]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c04:	4a5d      	ldr	r2, [pc, #372]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c06:	f043 0320 	orr.w	r3, r3, #32
 8000c0a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c0c:	e0ae      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART4){
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a5e      	ldr	r2, [pc, #376]	; (8000d8c <USART_PeriClock_Control+0x1e8>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d106      	bne.n	8000c24 <USART_PeriClock_Control+0x80>
			UART4_PCLK_EN();
 8000c16:	4b59      	ldr	r3, [pc, #356]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a58      	ldr	r2, [pc, #352]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c22:	e0a3      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART5){
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a5a      	ldr	r2, [pc, #360]	; (8000d90 <USART_PeriClock_Control+0x1ec>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d106      	bne.n	8000c3a <USART_PeriClock_Control+0x96>
			UART5_PCLK_EN();
 8000c2c:	4b53      	ldr	r3, [pc, #332]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	4a52      	ldr	r2, [pc, #328]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c36:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c38:	e098      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART7){
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a55      	ldr	r2, [pc, #340]	; (8000d94 <USART_PeriClock_Control+0x1f0>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d106      	bne.n	8000c50 <USART_PeriClock_Control+0xac>
			UART7_PCLK_EN();
 8000c42:	4b4e      	ldr	r3, [pc, #312]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a4d      	ldr	r2, [pc, #308]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c4e:	e08d      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART8){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a51      	ldr	r2, [pc, #324]	; (8000d98 <USART_PeriClock_Control+0x1f4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d106      	bne.n	8000c66 <USART_PeriClock_Control+0xc2>
			UART8_PCLK_EN();
 8000c58:	4b48      	ldr	r3, [pc, #288]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a47      	ldr	r2, [pc, #284]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c64:	e082      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART9){
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a4c      	ldr	r2, [pc, #304]	; (8000d9c <USART_PeriClock_Control+0x1f8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d106      	bne.n	8000c7c <USART_PeriClock_Control+0xd8>
			UART9_PCLK_EN();
 8000c6e:	4b43      	ldr	r3, [pc, #268]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a42      	ldr	r2, [pc, #264]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c7a:	e077      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART10){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a48      	ldr	r2, [pc, #288]	; (8000da0 <USART_PeriClock_Control+0x1fc>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d173      	bne.n	8000d6c <USART_PeriClock_Control+0x1c8>
			UART10_PCLK_EN();
 8000c84:	4b3d      	ldr	r3, [pc, #244]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c88:	4a3c      	ldr	r2, [pc, #240]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c90:	e06c      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		if (pUSARTx == USART1) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a38      	ldr	r2, [pc, #224]	; (8000d78 <USART_PeriClock_Control+0x1d4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d106      	bne.n	8000ca8 <USART_PeriClock_Control+0x104>
			USART1_PCLK_DI();
 8000c9a:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a37      	ldr	r2, [pc, #220]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000ca0:	f023 0310 	bic.w	r3, r3, #16
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ca6:	e061      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == USART2) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a35      	ldr	r2, [pc, #212]	; (8000d80 <USART_PeriClock_Control+0x1dc>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d106      	bne.n	8000cbe <USART_PeriClock_Control+0x11a>
			USART2_PCLK_DI();
 8000cb0:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000cb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000cba:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cbc:	e056      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == USART3) {
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a30      	ldr	r2, [pc, #192]	; (8000d84 <USART_PeriClock_Control+0x1e0>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d106      	bne.n	8000cd4 <USART_PeriClock_Control+0x130>
			USART3_PCLK_DI();
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a2c      	ldr	r2, [pc, #176]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cd2:	e04b      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == USART6) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a2c      	ldr	r2, [pc, #176]	; (8000d88 <USART_PeriClock_Control+0x1e4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d106      	bne.n	8000cea <USART_PeriClock_Control+0x146>
			USART6_PCLK_DI();
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce0:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000ce2:	f023 0320 	bic.w	r3, r3, #32
 8000ce6:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ce8:	e040      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART4){
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <USART_PeriClock_Control+0x1e8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d106      	bne.n	8000d00 <USART_PeriClock_Control+0x15c>
			UART4_PCLK_DI();
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000cf8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cfe:	e035      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART5){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a23      	ldr	r2, [pc, #140]	; (8000d90 <USART_PeriClock_Control+0x1ec>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d106      	bne.n	8000d16 <USART_PeriClock_Control+0x172>
			UART5_PCLK_DI();
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000d0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d14:	e02a      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART7){
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a1e      	ldr	r2, [pc, #120]	; (8000d94 <USART_PeriClock_Control+0x1f0>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d106      	bne.n	8000d2c <USART_PeriClock_Control+0x188>
			UART7_PCLK_DI();
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000d24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d2a:	e01f      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART8){
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a1a      	ldr	r2, [pc, #104]	; (8000d98 <USART_PeriClock_Control+0x1f4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d106      	bne.n	8000d42 <USART_PeriClock_Control+0x19e>
			UART8_PCLK_DI();
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000d3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d40:	e014      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART9){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <USART_PeriClock_Control+0x1f8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d106      	bne.n	8000d58 <USART_PeriClock_Control+0x1b4>
			UART9_PCLK_DI();
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000d56:	e009      	b.n	8000d6c <USART_PeriClock_Control+0x1c8>
		else if (pUSARTx == UART10){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a11      	ldr	r2, [pc, #68]	; (8000da0 <USART_PeriClock_Control+0x1fc>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d105      	bne.n	8000d6c <USART_PeriClock_Control+0x1c8>
			UART10_PCLK_DI();
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d64:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <USART_PeriClock_Control+0x1d8>)
 8000d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d6a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40004400 	.word	0x40004400
 8000d84:	40004800 	.word	0x40004800
 8000d88:	40011400 	.word	0x40011400
 8000d8c:	40004c00 	.word	0x40004c00
 8000d90:	40005000 	.word	0x40005000
 8000d94:	40007800 	.word	0x40007800
 8000d98:	40007c00 	.word	0x40007c00
 8000d9c:	40011800 	.word	0x40011800
 8000da0:	40011c00 	.word	0x40011c00

08000da4 <USART_GetFlagStatus>:

/* Returns whether the specified flag in SR is set or not */
uint8_t USART_GetFlagStatus(USART_RegDef_t* pUSARTx, uint32_t FlagName) {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	if (pUSARTx->SR & FlagName) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <USART_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
	...

08000dcc <USART_SetBaudRate>:
 *
 * @Note					- The formula to calculate USART DIV value for BRR is
 * 							- taken from STM32F413XX_RM
 *
 */
void USART_SetBaudRate(USART_RegDef_t* pUSARTx, uint32_t BaudRate){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
	// variable to hold the APB clock value
	uint32_t pClkx = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
	// variable to hold the usart prescalar
	uint32_t usartDiv = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
	// variable to hold mantissa and fraction values
	uint32_t mantissa = 0, fraction = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
	// temporary register
	uint32_t tempreg = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]

	if ((pUSARTx == USART2) || (pUSARTx == USART3) || (pUSARTx == UART7) || (pUSARTx == UART8)){
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a44      	ldr	r2, [pc, #272]	; (8000f00 <USART_SetBaudRate+0x134>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00b      	beq.n	8000e0a <USART_SetBaudRate+0x3e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a43      	ldr	r2, [pc, #268]	; (8000f04 <USART_SetBaudRate+0x138>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d007      	beq.n	8000e0a <USART_SetBaudRate+0x3e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a42      	ldr	r2, [pc, #264]	; (8000f08 <USART_SetBaudRate+0x13c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d003      	beq.n	8000e0a <USART_SetBaudRate+0x3e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a41      	ldr	r2, [pc, #260]	; (8000f0c <USART_SetBaudRate+0x140>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d103      	bne.n	8000e12 <USART_SetBaudRate+0x46>
		// The peripheral bus is APB1 so fetching its clock
		pClkx = RCC_GetPCLK1Value();
 8000e0a:	f7ff fdff 	bl	8000a0c <RCC_GetPCLK1Value>
 8000e0e:	61f8      	str	r0, [r7, #28]
 8000e10:	e01a      	b.n	8000e48 <USART_SetBaudRate+0x7c>
	}
	else if ((pUSARTx == USART1) || (pUSARTx == USART6) || (pUSARTx == UART4) ||
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a3e      	ldr	r2, [pc, #248]	; (8000f10 <USART_SetBaudRate+0x144>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d013      	beq.n	8000e42 <USART_SetBaudRate+0x76>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a3d      	ldr	r2, [pc, #244]	; (8000f14 <USART_SetBaudRate+0x148>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00f      	beq.n	8000e42 <USART_SetBaudRate+0x76>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a3c      	ldr	r2, [pc, #240]	; (8000f18 <USART_SetBaudRate+0x14c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d00b      	beq.n	8000e42 <USART_SetBaudRate+0x76>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a3b      	ldr	r2, [pc, #236]	; (8000f1c <USART_SetBaudRate+0x150>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d007      	beq.n	8000e42 <USART_SetBaudRate+0x76>
			(pUSARTx == UART5) || (pUSARTx == UART9) || (pUSARTx == UART10)){
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a3a      	ldr	r2, [pc, #232]	; (8000f20 <USART_SetBaudRate+0x154>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d003      	beq.n	8000e42 <USART_SetBaudRate+0x76>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a39      	ldr	r2, [pc, #228]	; (8000f24 <USART_SetBaudRate+0x158>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d102      	bne.n	8000e48 <USART_SetBaudRate+0x7c>
		// The peripheral bus is APB2 so fetching its clock
		pClkx = RCC_GetPCLK2Value();
 8000e42:	f7ff fe49 	bl	8000ad8 <RCC_GetPCLK2Value>
 8000e46:	61f8      	str	r0, [r7, #28]
	}

	// check for oversampling configuration
	if ((pUSARTx->CR1 & (1 << USART_CR1_OVER8)) == USART_OVER_SAMPLING_8) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d10b      	bne.n	8000e6c <USART_SetBaudRate+0xa0>
		// oversampling by 8
		usartDiv = pClkx / (8 * (2 - USART_OVER_SAMPLING_8) * BaudRate);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	61bb      	str	r3, [r7, #24]

		// multiplying by 100 to make it into a whole number
		usartDiv = usartDiv * 100;
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	2264      	movs	r2, #100	; 0x64
 8000e64:	fb02 f303 	mul.w	r3, r2, r3
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	e010      	b.n	8000e8e <USART_SetBaudRate+0xc2>
	}
	else if ((pUSARTx->CR1 & (1 << USART_CR1_OVER8)) == USART_OVER_SAMPLING_16) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10a      	bne.n	8000e8e <USART_SetBaudRate+0xc2>
		// oversampling by 16
		usartDiv = pClkx / (8 * (2 - USART_OVER_SAMPLING_16) * BaudRate);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	61bb      	str	r3, [r7, #24]

		// multiplying by 100 to make it into a whole number
		usartDiv = usartDiv * 100;
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	2264      	movs	r2, #100	; 0x64
 8000e88:	fb02 f303 	mul.w	r3, r2, r3
 8000e8c:	61bb      	str	r3, [r7, #24]
	}

	// calculate mantissa part
	mantissa = usartDiv / 100;
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4a25      	ldr	r2, [pc, #148]	; (8000f28 <USART_SetBaudRate+0x15c>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	613b      	str	r3, [r7, #16]
	// load mantissa into 11:0 bit fields of BRR
	tempreg |= mantissa << 4;
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

	// calculate fractional part
	fraction = usartDiv - mantissa * 100;
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	2264      	movs	r2, #100	; 0x64
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	617b      	str	r3, [r7, #20]
	if((pUSARTx->CR1 & (1 << USART_CR1_OVER8)) == USART_OVER_SAMPLING_8){
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d10a      	bne.n	8000ed4 <USART_SetBaudRate+0x108>
		// multiplying by 8 because oversampling is by 8
		// adding 50 to round up
		fraction = ((((fraction * 8) + 50) / 100) & (uint8_t)0x07);
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	3332      	adds	r3, #50	; 0x32
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <USART_SetBaudRate+0x15c>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	e009      	b.n	8000ee8 <USART_SetBaudRate+0x11c>
	}
	else {
		// multiplying by 16 because oversampling is by 16
		// adding 50 to round up
		fraction = ((((fraction * 16) + 50) / 100) & (uint8_t)0x0F);
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	3332      	adds	r3, #50	; 0x32
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <USART_SetBaudRate+0x15c>)
 8000edc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee0:	095b      	lsrs	r3, r3, #5
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	617b      	str	r3, [r7, #20]
	}

	// loading the fraction in bit fields 3:0 of BRR
	tempreg |= fraction;
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

	// assigning tempreg to BRR
	pUSARTx->BRR = tempreg;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	609a      	str	r2, [r3, #8]
}
 8000ef6:	bf00      	nop
 8000ef8:	3720      	adds	r7, #32
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40004400 	.word	0x40004400
 8000f04:	40004800 	.word	0x40004800
 8000f08:	40007800 	.word	0x40007800
 8000f0c:	40007c00 	.word	0x40007c00
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40011400 	.word	0x40011400
 8000f18:	40004c00 	.word	0x40004c00
 8000f1c:	40005000 	.word	0x40005000
 8000f20:	40011800 	.word	0x40011800
 8000f24:	40011c00 	.word	0x40011c00
 8000f28:	51eb851f 	.word	0x51eb851f

08000f2c <USART_Init>:
 * @return					- none
 *
 * @Note					-
 *
 */
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
	uint8_t mode = pUSARTHandle->USART_Config.USART_Mode;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	791b      	ldrb	r3, [r3, #4]
 8000f3c:	76fb      	strb	r3, [r7, #27]
	uint32_t baud = pUSARTHandle->USART_Config.USART_Baud;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	617b      	str	r3, [r7, #20]
	uint8_t parityControl = pUSARTHandle->USART_Config.USART_ParityControl;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7b1b      	ldrb	r3, [r3, #12]
 8000f48:	74fb      	strb	r3, [r7, #19]
	uint8_t noOfStopBits = pUSARTHandle->USART_Config.USART_NoOfStopBits;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7b5b      	ldrb	r3, [r3, #13]
 8000f4e:	74bb      	strb	r3, [r7, #18]
	uint8_t hwFlowControl = pUSARTHandle->USART_Config.USART_HWFlowControl;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7b9b      	ldrb	r3, [r3, #14]
 8000f54:	747b      	strb	r3, [r7, #17]
	uint8_t wordLength = pUSARTHandle->USART_Config.USART_WordLength;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7bdb      	ldrb	r3, [r3, #15]
 8000f5a:	743b      	strb	r3, [r7, #16]
	uint8_t overSampling = pUSARTHandle->USART_Config.USART_OverSampling;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7c1b      	ldrb	r3, [r3, #16]
 8000f60:	73fb      	strb	r3, [r7, #15]

	// enable USART peripheral clock
	USART_PeriClock_Control(pUSARTHandle->pUSARTx, ENABLE);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2101      	movs	r1, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fe1b 	bl	8000ba4 <USART_PeriClock_Control>

	// Enable USART Tx and RX blocks according the mode
	// provided by the application layer
	if(mode == USART_MODE_ONLY_TX){
 8000f6e:	7efb      	ldrb	r3, [r7, #27]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d104      	bne.n	8000f7e <USART_Init+0x52>
		// set TE bit in CR1
		tempreg |= (1 << USART_CR1_TE);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f043 0308 	orr.w	r3, r3, #8
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	e00e      	b.n	8000f9c <USART_Init+0x70>
	}
	else if (mode == USART_MODE_ONLY_RX){
 8000f7e:	7efb      	ldrb	r3, [r7, #27]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d104      	bne.n	8000f8e <USART_Init+0x62>
		// set RE bit in CR1
		tempreg |= (1 << USART_CR1_RE);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	e006      	b.n	8000f9c <USART_Init+0x70>
	}
	else if (mode == USART_MODE_TXRX){
 8000f8e:	7efb      	ldrb	r3, [r7, #27]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d103      	bne.n	8000f9c <USART_Init+0x70>
		// set TE and RE bits;in CR1
		tempreg |= ((1 << USART_CR1_TE) | (1 << USART_CR1_RE));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f043 030c 	orr.w	r3, r3, #12
 8000f9a:	61fb      	str	r3, [r7, #28]
	}

	// configure the word length in CR1
	tempreg |= wordLength << (USART_CR1_M);
 8000f9c:	7c3b      	ldrb	r3, [r7, #16]
 8000f9e:	031b      	lsls	r3, r3, #12
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61fb      	str	r3, [r7, #28]

	// configure parity control and parity selection bits in CR1
	if (parityControl == USART_PARITY_EN_EVEN){
 8000fa8:	7cfb      	ldrb	r3, [r7, #19]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d108      	bne.n	8000fc0 <USART_Init+0x94>
		// set PCE bit in CR1
		tempreg |= (1 << USART_CR1_PCE);
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb4:	61fb      	str	r3, [r7, #28]

		// clear PS bit in CR1
		tempreg &= ~(1 << USART_CR1_PS);
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e012      	b.n	8000fe6 <USART_Init+0xba>
	}
	else if (parityControl == USART_PARITY_EN_ODD){
 8000fc0:	7cfb      	ldrb	r3, [r7, #19]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d108      	bne.n	8000fd8 <USART_Init+0xac>
		// set PCE bit in CR1
		tempreg |= (1 << USART_CR1_PCE);
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fcc:	61fb      	str	r3, [r7, #28]

		// set PS bit in CR1
		tempreg |= (1 << USART_CR1_PS);
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e006      	b.n	8000fe6 <USART_Init+0xba>
	}
	else if (parityControl == USART_PARITY_DISABLE){
 8000fd8:	7cfb      	ldrb	r3, [r7, #19]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d103      	bne.n	8000fe6 <USART_Init+0xba>
		// clear PCE bit in CR1
		tempreg &= ~(1 << USART_CR1_PCE);
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fe4:	61fb      	str	r3, [r7, #28]
	}

	// configure over smapling mode
	tempreg |= (overSampling << USART_CR1_OVER8);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	03db      	lsls	r3, r3, #15
 8000fea:	461a      	mov	r2, r3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61fb      	str	r3, [r7, #28]

	// assign the value of tempreg to CR1
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	60da      	str	r2, [r3, #12]

	/* configuring CR2 register */
	tempreg = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]

	// configure the no. of stop bits in CR2
	tempreg |= (noOfStopBits << USART_CR2_STOP);
 8000ffe:	7cbb      	ldrb	r3, [r7, #18]
 8001000:	031b      	lsls	r3, r3, #12
 8001002:	461a      	mov	r2, r3
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	4313      	orrs	r3, r2
 8001008:	61fb      	str	r3, [r7, #28]

	// assign the value of tempreg to CR2
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	611a      	str	r2, [r3, #16]

	/* configure CR3 */
	tempreg = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]

	// configure USART hardware flow control
	if (hwFlowControl == USART_HW_FLOW_CTRL_NONE){
 8001016:	7c7b      	ldrb	r3, [r7, #17]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d108      	bne.n	800102e <USART_Init+0x102>
		// clear CTSE bit in CR3
		tempreg &= ~(1 << USART_CR3_CTSE);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001022:	61fb      	str	r3, [r7, #28]
		tempreg &= ~(1 << USART_CR3_RTSE);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	e01a      	b.n	8001064 <USART_Init+0x138>
	}
	else if (hwFlowControl == USART_HW_FLOW_CTS){
 800102e:	7c7b      	ldrb	r3, [r7, #17]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d104      	bne.n	800103e <USART_Init+0x112>
		// set CTSE bit in CR3
		tempreg |= (1 << USART_CR3_CTSE);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	e012      	b.n	8001064 <USART_Init+0x138>
	}
	else if (hwFlowControl == USART_HW_FLOW_RTS){
 800103e:	7c7b      	ldrb	r3, [r7, #17]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d104      	bne.n	800104e <USART_Init+0x122>
		// set RTSE bit in CR3
		tempreg |= (1 << USART_CR3_RTSE);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	e00a      	b.n	8001064 <USART_Init+0x138>
	}
	else if (hwFlowControl == USART_HW_FLOW_CTS_RTS){
 800104e:	7c7b      	ldrb	r3, [r7, #17]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d107      	bne.n	8001064 <USART_Init+0x138>
		// set CTSE and RTSE bits in Cr3
		tempreg |= (1 << USART_CR3_CTSE);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105a:	61fb      	str	r3, [r7, #28]
		tempreg |= (1 << USART_CR3_RTSE);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001062:	61fb      	str	r3, [r7, #28]
	}

	// assign the value of tempreg to CR3
	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	615a      	str	r2, [r3, #20]

	/* configure baud rate in BRR register */
	USART_SetBaudRate(pUSARTHandle->pUSARTx, baud);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6979      	ldr	r1, [r7, #20]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff feaa 	bl	8000dcc <USART_SetBaudRate>
}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <USART_PeripheralControl>:
 * @return					- none
 *
 * @Note					-
 *
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d106      	bne.n	80010a0 <USART_PeripheralControl+0x20>
		// sets the UE bit
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60da      	str	r2, [r3, #12]
	else {

		// clears UE bit
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 800109e:	e005      	b.n	80010ac <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	60da      	str	r2, [r3, #12]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <USART_SendData>:
 *
 * @Note					- this is blocking call (polling) as the function does not return until
 * 							  all the length no. of bytes are not transferred
 *
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t length){
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
	uint16_t *pData;

	for (uint32_t i = 0; i < length; i++){
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e038      	b.n	800113a <USART_SendData+0x84>
		// wait  until TXE is set to 1
		while(!(USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE)));
 80010c8:	bf00      	nop
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fe67 	bl	8000da4 <USART_GetFlagStatus>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f6      	beq.n	80010ca <USART_SendData+0x14>

		if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	7bdb      	ldrb	r3, [r3, #15]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d115      	bne.n	8001110 <USART_SendData+0x5a>
			pData = (uint16_t*)pTxBuffer;
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	613b      	str	r3, [r7, #16]
			// load only the first 9 bits in pData into DR by masking
			// the remaining bits
			pUSARTHandle->pUSARTx->DR = (*pData & (uint16_t)0x01FF);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010f6:	605a      	str	r2, [r3, #4]

			// check for the parity control
			if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	7b1b      	ldrb	r3, [r3, #12]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <USART_SendData+0x52>
				// no parity bit is used so all 9 bits are data
				// so increment the buffer twice
				pTxBuffer = pTxBuffer + 2;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	3302      	adds	r3, #2
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	e00b      	b.n	8001120 <USART_SendData+0x6a>
			}
			else {
				// 9th bit is parity bit which is attached to the
				// data by hardware. So, only first 8 bits are data bits.
				// Increment the buffer only once
				pTxBuffer++;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	3301      	adds	r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	e007      	b.n	8001120 <USART_SendData+0x6a>
			}
		}
		else {
			// 8-bit data so load data directly into DR
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]

			// increment the buffer address
			pTxBuffer++;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3301      	adds	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
		}

		// wait until the TC is set -- indicates that transmission is complete
		while(!(USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC)));
 8001120:	bf00      	nop
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2140      	movs	r1, #64	; 0x40
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe3b 	bl	8000da4 <USART_GetFlagStatus>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f6      	beq.n	8001122 <USART_SendData+0x6c>
	for (uint32_t i = 0; i < length; i++){
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d3c2      	bcc.n	80010c8 <USART_SendData+0x12>
	}
}
 8001142:	bf00      	nop
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <findslot>:
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <findslot+0x2c>)
 800114e:	b510      	push	{r4, lr}
 8001150:	4604      	mov	r4, r0
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	b118      	cbz	r0, 800115e <findslot+0x12>
 8001156:	6983      	ldr	r3, [r0, #24]
 8001158:	b90b      	cbnz	r3, 800115e <findslot+0x12>
 800115a:	f000 fafb 	bl	8001754 <__sinit>
 800115e:	2c13      	cmp	r4, #19
 8001160:	d807      	bhi.n	8001172 <findslot+0x26>
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <findslot+0x30>)
 8001164:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001168:	3201      	adds	r2, #1
 800116a:	d002      	beq.n	8001172 <findslot+0x26>
 800116c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001170:	bd10      	pop	{r4, pc}
 8001172:	2000      	movs	r0, #0
 8001174:	e7fc      	b.n	8001170 <findslot+0x24>
 8001176:	bf00      	nop
 8001178:	2000042c 	.word	0x2000042c
 800117c:	200004bc 	.word	0x200004bc

08001180 <checkerror>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	1c43      	adds	r3, r0, #1
 8001184:	4604      	mov	r4, r0
 8001186:	d109      	bne.n	800119c <checkerror+0x1c>
 8001188:	f000 fa86 	bl	8001698 <__errno>
 800118c:	2613      	movs	r6, #19
 800118e:	4605      	mov	r5, r0
 8001190:	2700      	movs	r7, #0
 8001192:	4630      	mov	r0, r6
 8001194:	4639      	mov	r1, r7
 8001196:	beab      	bkpt	0x00ab
 8001198:	4606      	mov	r6, r0
 800119a:	602e      	str	r6, [r5, #0]
 800119c:	4620      	mov	r0, r4
 800119e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080011a0 <error>:
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	4604      	mov	r4, r0
 80011a4:	f000 fa78 	bl	8001698 <__errno>
 80011a8:	2613      	movs	r6, #19
 80011aa:	4605      	mov	r5, r0
 80011ac:	2700      	movs	r7, #0
 80011ae:	4630      	mov	r0, r6
 80011b0:	4639      	mov	r1, r7
 80011b2:	beab      	bkpt	0x00ab
 80011b4:	4606      	mov	r6, r0
 80011b6:	602e      	str	r6, [r5, #0]
 80011b8:	4620      	mov	r0, r4
 80011ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080011bc <_swiread>:
 80011bc:	b530      	push	{r4, r5, lr}
 80011be:	b085      	sub	sp, #20
 80011c0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80011c4:	9203      	str	r2, [sp, #12]
 80011c6:	2406      	movs	r4, #6
 80011c8:	ad01      	add	r5, sp, #4
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	beab      	bkpt	0x00ab
 80011d0:	4604      	mov	r4, r0
 80011d2:	4620      	mov	r0, r4
 80011d4:	f7ff ffd4 	bl	8001180 <checkerror>
 80011d8:	b005      	add	sp, #20
 80011da:	bd30      	pop	{r4, r5, pc}

080011dc <_read>:
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	460e      	mov	r6, r1
 80011e0:	4615      	mov	r5, r2
 80011e2:	f7ff ffb3 	bl	800114c <findslot>
 80011e6:	4604      	mov	r4, r0
 80011e8:	b930      	cbnz	r0, 80011f8 <_read+0x1c>
 80011ea:	f000 fa55 	bl	8001698 <__errno>
 80011ee:	2309      	movs	r3, #9
 80011f0:	6003      	str	r3, [r0, #0]
 80011f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
 80011f8:	6800      	ldr	r0, [r0, #0]
 80011fa:	462a      	mov	r2, r5
 80011fc:	4631      	mov	r1, r6
 80011fe:	f7ff ffdd 	bl	80011bc <_swiread>
 8001202:	1c43      	adds	r3, r0, #1
 8001204:	bf1f      	itttt	ne
 8001206:	6863      	ldrne	r3, [r4, #4]
 8001208:	1a28      	subne	r0, r5, r0
 800120a:	181b      	addne	r3, r3, r0
 800120c:	6063      	strne	r3, [r4, #4]
 800120e:	e7f2      	b.n	80011f6 <_read+0x1a>

08001210 <_swilseek>:
 8001210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001212:	460c      	mov	r4, r1
 8001214:	4616      	mov	r6, r2
 8001216:	f7ff ff99 	bl	800114c <findslot>
 800121a:	4605      	mov	r5, r0
 800121c:	b940      	cbnz	r0, 8001230 <_swilseek+0x20>
 800121e:	f000 fa3b 	bl	8001698 <__errno>
 8001222:	2309      	movs	r3, #9
 8001224:	6003      	str	r3, [r0, #0]
 8001226:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800122a:	4620      	mov	r0, r4
 800122c:	b003      	add	sp, #12
 800122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001230:	2e02      	cmp	r6, #2
 8001232:	d903      	bls.n	800123c <_swilseek+0x2c>
 8001234:	f000 fa30 	bl	8001698 <__errno>
 8001238:	2316      	movs	r3, #22
 800123a:	e7f3      	b.n	8001224 <_swilseek+0x14>
 800123c:	2e01      	cmp	r6, #1
 800123e:	d112      	bne.n	8001266 <_swilseek+0x56>
 8001240:	6843      	ldr	r3, [r0, #4]
 8001242:	18e4      	adds	r4, r4, r3
 8001244:	d4f6      	bmi.n	8001234 <_swilseek+0x24>
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	260a      	movs	r6, #10
 800124a:	e9cd 3400 	strd	r3, r4, [sp]
 800124e:	466f      	mov	r7, sp
 8001250:	4630      	mov	r0, r6
 8001252:	4639      	mov	r1, r7
 8001254:	beab      	bkpt	0x00ab
 8001256:	4606      	mov	r6, r0
 8001258:	4630      	mov	r0, r6
 800125a:	f7ff ff91 	bl	8001180 <checkerror>
 800125e:	2800      	cmp	r0, #0
 8001260:	dbe1      	blt.n	8001226 <_swilseek+0x16>
 8001262:	606c      	str	r4, [r5, #4]
 8001264:	e7e1      	b.n	800122a <_swilseek+0x1a>
 8001266:	2e02      	cmp	r6, #2
 8001268:	d1ed      	bne.n	8001246 <_swilseek+0x36>
 800126a:	6803      	ldr	r3, [r0, #0]
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	260c      	movs	r6, #12
 8001270:	466f      	mov	r7, sp
 8001272:	4630      	mov	r0, r6
 8001274:	4639      	mov	r1, r7
 8001276:	beab      	bkpt	0x00ab
 8001278:	4606      	mov	r6, r0
 800127a:	4630      	mov	r0, r6
 800127c:	f7ff ff80 	bl	8001180 <checkerror>
 8001280:	1c43      	adds	r3, r0, #1
 8001282:	d0d0      	beq.n	8001226 <_swilseek+0x16>
 8001284:	4404      	add	r4, r0
 8001286:	e7de      	b.n	8001246 <_swilseek+0x36>

08001288 <_lseek>:
 8001288:	f7ff bfc2 	b.w	8001210 <_swilseek>

0800128c <_swiwrite>:
 800128c:	b530      	push	{r4, r5, lr}
 800128e:	b085      	sub	sp, #20
 8001290:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001294:	9203      	str	r2, [sp, #12]
 8001296:	2405      	movs	r4, #5
 8001298:	ad01      	add	r5, sp, #4
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	beab      	bkpt	0x00ab
 80012a0:	4604      	mov	r4, r0
 80012a2:	4620      	mov	r0, r4
 80012a4:	f7ff ff6c 	bl	8001180 <checkerror>
 80012a8:	b005      	add	sp, #20
 80012aa:	bd30      	pop	{r4, r5, pc}

080012ac <_write>:
 80012ac:	b570      	push	{r4, r5, r6, lr}
 80012ae:	460e      	mov	r6, r1
 80012b0:	4615      	mov	r5, r2
 80012b2:	f7ff ff4b 	bl	800114c <findslot>
 80012b6:	4604      	mov	r4, r0
 80012b8:	b930      	cbnz	r0, 80012c8 <_write+0x1c>
 80012ba:	f000 f9ed 	bl	8001698 <__errno>
 80012be:	2309      	movs	r3, #9
 80012c0:	6003      	str	r3, [r0, #0]
 80012c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
 80012c8:	6800      	ldr	r0, [r0, #0]
 80012ca:	462a      	mov	r2, r5
 80012cc:	4631      	mov	r1, r6
 80012ce:	f7ff ffdd 	bl	800128c <_swiwrite>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	dbf5      	blt.n	80012c2 <_write+0x16>
 80012d6:	6862      	ldr	r2, [r4, #4]
 80012d8:	1ae8      	subs	r0, r5, r3
 80012da:	4402      	add	r2, r0
 80012dc:	42ab      	cmp	r3, r5
 80012de:	6062      	str	r2, [r4, #4]
 80012e0:	d1f1      	bne.n	80012c6 <_write+0x1a>
 80012e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff bf5a 	b.w	80011a0 <error>

080012ec <_swiclose>:
 80012ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012ee:	2402      	movs	r4, #2
 80012f0:	9001      	str	r0, [sp, #4]
 80012f2:	ad01      	add	r5, sp, #4
 80012f4:	4620      	mov	r0, r4
 80012f6:	4629      	mov	r1, r5
 80012f8:	beab      	bkpt	0x00ab
 80012fa:	4604      	mov	r4, r0
 80012fc:	4620      	mov	r0, r4
 80012fe:	f7ff ff3f 	bl	8001180 <checkerror>
 8001302:	b003      	add	sp, #12
 8001304:	bd30      	pop	{r4, r5, pc}
	...

08001308 <_close>:
 8001308:	b538      	push	{r3, r4, r5, lr}
 800130a:	4605      	mov	r5, r0
 800130c:	f7ff ff1e 	bl	800114c <findslot>
 8001310:	4604      	mov	r4, r0
 8001312:	b930      	cbnz	r0, 8001322 <_close+0x1a>
 8001314:	f000 f9c0 	bl	8001698 <__errno>
 8001318:	2309      	movs	r3, #9
 800131a:	6003      	str	r3, [r0, #0]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001320:	bd38      	pop	{r3, r4, r5, pc}
 8001322:	3d01      	subs	r5, #1
 8001324:	2d01      	cmp	r5, #1
 8001326:	d809      	bhi.n	800133c <_close+0x34>
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <_close+0x48>)
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	429a      	cmp	r2, r3
 8001330:	d104      	bne.n	800133c <_close+0x34>
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001336:	6003      	str	r3, [r0, #0]
 8001338:	2000      	movs	r0, #0
 800133a:	e7f1      	b.n	8001320 <_close+0x18>
 800133c:	6820      	ldr	r0, [r4, #0]
 800133e:	f7ff ffd5 	bl	80012ec <_swiclose>
 8001342:	2800      	cmp	r0, #0
 8001344:	d1ec      	bne.n	8001320 <_close+0x18>
 8001346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134a:	6023      	str	r3, [r4, #0]
 800134c:	e7e8      	b.n	8001320 <_close+0x18>
 800134e:	bf00      	nop
 8001350:	200004bc 	.word	0x200004bc

08001354 <_swistat>:
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	460c      	mov	r4, r1
 8001358:	f7ff fef8 	bl	800114c <findslot>
 800135c:	4605      	mov	r5, r0
 800135e:	b930      	cbnz	r0, 800136e <_swistat+0x1a>
 8001360:	f000 f99a 	bl	8001698 <__errno>
 8001364:	2309      	movs	r3, #9
 8001366:	6003      	str	r3, [r0, #0]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800136c:	bd70      	pop	{r4, r5, r6, pc}
 800136e:	6863      	ldr	r3, [r4, #4]
 8001370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001374:	6063      	str	r3, [r4, #4]
 8001376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137a:	64a3      	str	r3, [r4, #72]	; 0x48
 800137c:	260c      	movs	r6, #12
 800137e:	4630      	mov	r0, r6
 8001380:	4629      	mov	r1, r5
 8001382:	beab      	bkpt	0x00ab
 8001384:	4605      	mov	r5, r0
 8001386:	4628      	mov	r0, r5
 8001388:	f7ff fefa 	bl	8001180 <checkerror>
 800138c:	1c43      	adds	r3, r0, #1
 800138e:	bf1c      	itt	ne
 8001390:	6120      	strne	r0, [r4, #16]
 8001392:	2000      	movne	r0, #0
 8001394:	e7ea      	b.n	800136c <_swistat+0x18>

08001396 <_fstat>:
 8001396:	460b      	mov	r3, r1
 8001398:	b510      	push	{r4, lr}
 800139a:	2100      	movs	r1, #0
 800139c:	4604      	mov	r4, r0
 800139e:	2258      	movs	r2, #88	; 0x58
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fa9c 	bl	80018de <memset>
 80013a6:	4601      	mov	r1, r0
 80013a8:	4620      	mov	r0, r4
 80013aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013ae:	f7ff bfd1 	b.w	8001354 <_swistat>

080013b2 <_stat>:
 80013b2:	b538      	push	{r3, r4, r5, lr}
 80013b4:	460d      	mov	r5, r1
 80013b6:	4604      	mov	r4, r0
 80013b8:	2258      	movs	r2, #88	; 0x58
 80013ba:	2100      	movs	r1, #0
 80013bc:	4628      	mov	r0, r5
 80013be:	f000 fa8e 	bl	80018de <memset>
 80013c2:	4620      	mov	r0, r4
 80013c4:	2100      	movs	r1, #0
 80013c6:	f000 f811 	bl	80013ec <_swiopen>
 80013ca:	1c43      	adds	r3, r0, #1
 80013cc:	4604      	mov	r4, r0
 80013ce:	d00b      	beq.n	80013e8 <_stat+0x36>
 80013d0:	686b      	ldr	r3, [r5, #4]
 80013d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80013d6:	606b      	str	r3, [r5, #4]
 80013d8:	4629      	mov	r1, r5
 80013da:	f7ff ffbb 	bl	8001354 <_swistat>
 80013de:	4605      	mov	r5, r0
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff ff91 	bl	8001308 <_close>
 80013e6:	462c      	mov	r4, r5
 80013e8:	4620      	mov	r0, r4
 80013ea:	bd38      	pop	{r3, r4, r5, pc}

080013ec <_swiopen>:
 80013ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <_swiopen+0xb0>)
 80013f2:	b097      	sub	sp, #92	; 0x5c
 80013f4:	4681      	mov	r9, r0
 80013f6:	460f      	mov	r7, r1
 80013f8:	2500      	movs	r5, #0
 80013fa:	461e      	mov	r6, r3
 80013fc:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001400:	1c61      	adds	r1, r4, #1
 8001402:	d037      	beq.n	8001474 <_swiopen+0x88>
 8001404:	3501      	adds	r5, #1
 8001406:	2d14      	cmp	r5, #20
 8001408:	d1f8      	bne.n	80013fc <_swiopen+0x10>
 800140a:	f000 f945 	bl	8001698 <__errno>
 800140e:	2318      	movs	r3, #24
 8001410:	6003      	str	r3, [r0, #0]
 8001412:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001416:	e03d      	b.n	8001494 <_swiopen+0xa8>
 8001418:	f3c7 4400 	ubfx	r4, r7, #16, #1
 800141c:	f240 6301 	movw	r3, #1537	; 0x601
 8001420:	07ba      	lsls	r2, r7, #30
 8001422:	bf48      	it	mi
 8001424:	f044 0402 	orrmi.w	r4, r4, #2
 8001428:	421f      	tst	r7, r3
 800142a:	bf18      	it	ne
 800142c:	f044 0404 	orrne.w	r4, r4, #4
 8001430:	073b      	lsls	r3, r7, #28
 8001432:	bf48      	it	mi
 8001434:	f024 0404 	bicmi.w	r4, r4, #4
 8001438:	4648      	mov	r0, r9
 800143a:	bf48      	it	mi
 800143c:	f044 0408 	orrmi.w	r4, r4, #8
 8001440:	f8cd 9000 	str.w	r9, [sp]
 8001444:	f7fe feec 	bl	8000220 <strlen>
 8001448:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800144c:	2401      	movs	r4, #1
 800144e:	4620      	mov	r0, r4
 8001450:	4641      	mov	r1, r8
 8001452:	beab      	bkpt	0x00ab
 8001454:	4604      	mov	r4, r0
 8001456:	2c00      	cmp	r4, #0
 8001458:	db07      	blt.n	800146a <_swiopen+0x7e>
 800145a:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 800145e:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8001462:	2300      	movs	r3, #0
 8001464:	6073      	str	r3, [r6, #4]
 8001466:	462c      	mov	r4, r5
 8001468:	e014      	b.n	8001494 <_swiopen+0xa8>
 800146a:	4620      	mov	r0, r4
 800146c:	f7ff fe98 	bl	80011a0 <error>
 8001470:	4604      	mov	r4, r0
 8001472:	e00f      	b.n	8001494 <_swiopen+0xa8>
 8001474:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 8001478:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800147c:	46e8      	mov	r8, sp
 800147e:	d1cb      	bne.n	8001418 <_swiopen+0x2c>
 8001480:	4641      	mov	r1, r8
 8001482:	4648      	mov	r0, r9
 8001484:	f7ff ff95 	bl	80013b2 <_stat>
 8001488:	3001      	adds	r0, #1
 800148a:	d0c5      	beq.n	8001418 <_swiopen+0x2c>
 800148c:	f000 f904 	bl	8001698 <__errno>
 8001490:	2311      	movs	r3, #17
 8001492:	6003      	str	r3, [r0, #0]
 8001494:	4620      	mov	r0, r4
 8001496:	b017      	add	sp, #92	; 0x5c
 8001498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800149c:	200004bc 	.word	0x200004bc

080014a0 <_get_semihosting_exts>:
 80014a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80014a4:	4606      	mov	r6, r0
 80014a6:	460f      	mov	r7, r1
 80014a8:	482a      	ldr	r0, [pc, #168]	; (8001554 <_get_semihosting_exts+0xb4>)
 80014aa:	2100      	movs	r1, #0
 80014ac:	4615      	mov	r5, r2
 80014ae:	f7ff ff9d 	bl	80013ec <_swiopen>
 80014b2:	462a      	mov	r2, r5
 80014b4:	4604      	mov	r4, r0
 80014b6:	2100      	movs	r1, #0
 80014b8:	4630      	mov	r0, r6
 80014ba:	f000 fa10 	bl	80018de <memset>
 80014be:	1c63      	adds	r3, r4, #1
 80014c0:	d016      	beq.n	80014f0 <_get_semihosting_exts+0x50>
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff fe42 	bl	800114c <findslot>
 80014c8:	f04f 080c 	mov.w	r8, #12
 80014cc:	4681      	mov	r9, r0
 80014ce:	4640      	mov	r0, r8
 80014d0:	4649      	mov	r1, r9
 80014d2:	beab      	bkpt	0x00ab
 80014d4:	4680      	mov	r8, r0
 80014d6:	4640      	mov	r0, r8
 80014d8:	f7ff fe52 	bl	8001180 <checkerror>
 80014dc:	2803      	cmp	r0, #3
 80014de:	dd02      	ble.n	80014e6 <_get_semihosting_exts+0x46>
 80014e0:	1ec3      	subs	r3, r0, #3
 80014e2:	42ab      	cmp	r3, r5
 80014e4:	dc08      	bgt.n	80014f8 <_get_semihosting_exts+0x58>
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff ff0e 	bl	8001308 <_close>
 80014ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80014f0:	4620      	mov	r0, r4
 80014f2:	b003      	add	sp, #12
 80014f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014f8:	2204      	movs	r2, #4
 80014fa:	eb0d 0102 	add.w	r1, sp, r2
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff fe6c 	bl	80011dc <_read>
 8001504:	2803      	cmp	r0, #3
 8001506:	ddee      	ble.n	80014e6 <_get_semihosting_exts+0x46>
 8001508:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800150c:	2b53      	cmp	r3, #83	; 0x53
 800150e:	d1ea      	bne.n	80014e6 <_get_semihosting_exts+0x46>
 8001510:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001514:	2b48      	cmp	r3, #72	; 0x48
 8001516:	d1e6      	bne.n	80014e6 <_get_semihosting_exts+0x46>
 8001518:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800151c:	2b46      	cmp	r3, #70	; 0x46
 800151e:	d1e2      	bne.n	80014e6 <_get_semihosting_exts+0x46>
 8001520:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001524:	2b42      	cmp	r3, #66	; 0x42
 8001526:	d1de      	bne.n	80014e6 <_get_semihosting_exts+0x46>
 8001528:	2201      	movs	r2, #1
 800152a:	4639      	mov	r1, r7
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff fe6f 	bl	8001210 <_swilseek>
 8001532:	2800      	cmp	r0, #0
 8001534:	dbd7      	blt.n	80014e6 <_get_semihosting_exts+0x46>
 8001536:	462a      	mov	r2, r5
 8001538:	4631      	mov	r1, r6
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff fe4e 	bl	80011dc <_read>
 8001540:	4605      	mov	r5, r0
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fee0 	bl	8001308 <_close>
 8001548:	4628      	mov	r0, r5
 800154a:	f7ff fe19 	bl	8001180 <checkerror>
 800154e:	4604      	mov	r4, r0
 8001550:	e7ce      	b.n	80014f0 <_get_semihosting_exts+0x50>
 8001552:	bf00      	nop
 8001554:	080025dd 	.word	0x080025dd

08001558 <initialise_semihosting_exts>:
 8001558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800155a:	4d0a      	ldr	r5, [pc, #40]	; (8001584 <initialise_semihosting_exts+0x2c>)
 800155c:	4c0a      	ldr	r4, [pc, #40]	; (8001588 <initialise_semihosting_exts+0x30>)
 800155e:	2100      	movs	r1, #0
 8001560:	2201      	movs	r2, #1
 8001562:	a801      	add	r0, sp, #4
 8001564:	6029      	str	r1, [r5, #0]
 8001566:	6022      	str	r2, [r4, #0]
 8001568:	f7ff ff9a 	bl	80014a0 <_get_semihosting_exts>
 800156c:	2800      	cmp	r0, #0
 800156e:	dd07      	ble.n	8001580 <initialise_semihosting_exts+0x28>
 8001570:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001574:	f003 0201 	and.w	r2, r3, #1
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	602a      	str	r2, [r5, #0]
 800157e:	6023      	str	r3, [r4, #0]
 8001580:	b003      	add	sp, #12
 8001582:	bd30      	pop	{r4, r5, pc}
 8001584:	20000424 	.word	0x20000424
 8001588:	20000428 	.word	0x20000428

0800158c <_has_ext_stdout_stderr>:
 800158c:	b510      	push	{r4, lr}
 800158e:	4c04      	ldr	r4, [pc, #16]	; (80015a0 <_has_ext_stdout_stderr+0x14>)
 8001590:	6822      	ldr	r2, [r4, #0]
 8001592:	2a00      	cmp	r2, #0
 8001594:	da01      	bge.n	800159a <_has_ext_stdout_stderr+0xe>
 8001596:	f7ff ffdf 	bl	8001558 <initialise_semihosting_exts>
 800159a:	6820      	ldr	r0, [r4, #0]
 800159c:	bd10      	pop	{r4, pc}
 800159e:	bf00      	nop
 80015a0:	20000428 	.word	0x20000428

080015a4 <initialise_monitor_handles>:
 80015a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a8:	b085      	sub	sp, #20
 80015aa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800165c <initialise_monitor_handles+0xb8>
 80015ae:	f8cd 9004 	str.w	r9, [sp, #4]
 80015b2:	2303      	movs	r3, #3
 80015b4:	2400      	movs	r4, #0
 80015b6:	9303      	str	r3, [sp, #12]
 80015b8:	f10d 0804 	add.w	r8, sp, #4
 80015bc:	9402      	str	r4, [sp, #8]
 80015be:	2501      	movs	r5, #1
 80015c0:	4628      	mov	r0, r5
 80015c2:	4641      	mov	r1, r8
 80015c4:	beab      	bkpt	0x00ab
 80015c6:	4605      	mov	r5, r0
 80015c8:	4e20      	ldr	r6, [pc, #128]	; (800164c <initialise_monitor_handles+0xa8>)
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <initialise_monitor_handles+0xac>)
 80015cc:	6035      	str	r5, [r6, #0]
 80015ce:	4623      	mov	r3, r4
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d4:	4614      	mov	r4, r2
 80015d6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80015da:	3301      	adds	r3, #1
 80015dc:	2b14      	cmp	r3, #20
 80015de:	d1fa      	bne.n	80015d6 <initialise_monitor_handles+0x32>
 80015e0:	f7ff ffd4 	bl	800158c <_has_ext_stdout_stderr>
 80015e4:	4d1b      	ldr	r5, [pc, #108]	; (8001654 <initialise_monitor_handles+0xb0>)
 80015e6:	b1d0      	cbz	r0, 800161e <initialise_monitor_handles+0x7a>
 80015e8:	f04f 0a03 	mov.w	sl, #3
 80015ec:	2304      	movs	r3, #4
 80015ee:	f8cd 9004 	str.w	r9, [sp, #4]
 80015f2:	2701      	movs	r7, #1
 80015f4:	f8cd a00c 	str.w	sl, [sp, #12]
 80015f8:	9302      	str	r3, [sp, #8]
 80015fa:	4638      	mov	r0, r7
 80015fc:	4641      	mov	r1, r8
 80015fe:	beab      	bkpt	0x00ab
 8001600:	4683      	mov	fp, r0
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <initialise_monitor_handles+0xb4>)
 8001604:	f8cd 9004 	str.w	r9, [sp, #4]
 8001608:	f8c3 b000 	str.w	fp, [r3]
 800160c:	2308      	movs	r3, #8
 800160e:	f8cd a00c 	str.w	sl, [sp, #12]
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	4638      	mov	r0, r7
 8001616:	4641      	mov	r1, r8
 8001618:	beab      	bkpt	0x00ab
 800161a:	4607      	mov	r7, r0
 800161c:	602f      	str	r7, [r5, #0]
 800161e:	682b      	ldr	r3, [r5, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	bf02      	ittt	eq
 8001624:	4b0c      	ldreq	r3, [pc, #48]	; (8001658 <initialise_monitor_handles+0xb4>)
 8001626:	681b      	ldreq	r3, [r3, #0]
 8001628:	602b      	streq	r3, [r5, #0]
 800162a:	6833      	ldr	r3, [r6, #0]
 800162c:	6023      	str	r3, [r4, #0]
 800162e:	2600      	movs	r6, #0
 8001630:	6066      	str	r6, [r4, #4]
 8001632:	f7ff ffab 	bl	800158c <_has_ext_stdout_stderr>
 8001636:	b130      	cbz	r0, 8001646 <initialise_monitor_handles+0xa2>
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <initialise_monitor_handles+0xb4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001640:	682b      	ldr	r3, [r5, #0]
 8001642:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001646:	b005      	add	sp, #20
 8001648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800164c:	200004b4 	.word	0x200004b4
 8001650:	200004bc 	.word	0x200004bc
 8001654:	200004b0 	.word	0x200004b0
 8001658:	200004b8 	.word	0x200004b8
 800165c:	080025f3 	.word	0x080025f3

08001660 <_isatty>:
 8001660:	b570      	push	{r4, r5, r6, lr}
 8001662:	f7ff fd73 	bl	800114c <findslot>
 8001666:	2509      	movs	r5, #9
 8001668:	4604      	mov	r4, r0
 800166a:	b920      	cbnz	r0, 8001676 <_isatty+0x16>
 800166c:	f000 f814 	bl	8001698 <__errno>
 8001670:	6005      	str	r5, [r0, #0]
 8001672:	4620      	mov	r0, r4
 8001674:	bd70      	pop	{r4, r5, r6, pc}
 8001676:	4628      	mov	r0, r5
 8001678:	4621      	mov	r1, r4
 800167a:	beab      	bkpt	0x00ab
 800167c:	4604      	mov	r4, r0
 800167e:	2c01      	cmp	r4, #1
 8001680:	d0f7      	beq.n	8001672 <_isatty+0x12>
 8001682:	f000 f809 	bl	8001698 <__errno>
 8001686:	2400      	movs	r4, #0
 8001688:	4605      	mov	r5, r0
 800168a:	2613      	movs	r6, #19
 800168c:	4630      	mov	r0, r6
 800168e:	4621      	mov	r1, r4
 8001690:	beab      	bkpt	0x00ab
 8001692:	4606      	mov	r6, r0
 8001694:	602e      	str	r6, [r5, #0]
 8001696:	e7ec      	b.n	8001672 <_isatty+0x12>

08001698 <__errno>:
 8001698:	4b01      	ldr	r3, [pc, #4]	; (80016a0 <__errno+0x8>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	2000042c 	.word	0x2000042c

080016a4 <std>:
 80016a4:	2300      	movs	r3, #0
 80016a6:	b510      	push	{r4, lr}
 80016a8:	4604      	mov	r4, r0
 80016aa:	e9c0 3300 	strd	r3, r3, [r0]
 80016ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016b2:	6083      	str	r3, [r0, #8]
 80016b4:	8181      	strh	r1, [r0, #12]
 80016b6:	6643      	str	r3, [r0, #100]	; 0x64
 80016b8:	81c2      	strh	r2, [r0, #14]
 80016ba:	6183      	str	r3, [r0, #24]
 80016bc:	4619      	mov	r1, r3
 80016be:	2208      	movs	r2, #8
 80016c0:	305c      	adds	r0, #92	; 0x5c
 80016c2:	f000 f90c 	bl	80018de <memset>
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <std+0x38>)
 80016c8:	6263      	str	r3, [r4, #36]	; 0x24
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <std+0x3c>)
 80016cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <std+0x40>)
 80016d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <std+0x44>)
 80016d4:	6224      	str	r4, [r4, #32]
 80016d6:	6323      	str	r3, [r4, #48]	; 0x30
 80016d8:	bd10      	pop	{r4, pc}
 80016da:	bf00      	nop
 80016dc:	080019f5 	.word	0x080019f5
 80016e0:	08001a17 	.word	0x08001a17
 80016e4:	08001a4f 	.word	0x08001a4f
 80016e8:	08001a73 	.word	0x08001a73

080016ec <_cleanup_r>:
 80016ec:	4901      	ldr	r1, [pc, #4]	; (80016f4 <_cleanup_r+0x8>)
 80016ee:	f000 b8af 	b.w	8001850 <_fwalk_reent>
 80016f2:	bf00      	nop
 80016f4:	08001d4d 	.word	0x08001d4d

080016f8 <__sfmoreglue>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	1e4a      	subs	r2, r1, #1
 80016fc:	2568      	movs	r5, #104	; 0x68
 80016fe:	4355      	muls	r5, r2
 8001700:	460e      	mov	r6, r1
 8001702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001706:	f000 f8f3 	bl	80018f0 <_malloc_r>
 800170a:	4604      	mov	r4, r0
 800170c:	b140      	cbz	r0, 8001720 <__sfmoreglue+0x28>
 800170e:	2100      	movs	r1, #0
 8001710:	e9c0 1600 	strd	r1, r6, [r0]
 8001714:	300c      	adds	r0, #12
 8001716:	60a0      	str	r0, [r4, #8]
 8001718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800171c:	f000 f8df 	bl	80018de <memset>
 8001720:	4620      	mov	r0, r4
 8001722:	bd70      	pop	{r4, r5, r6, pc}

08001724 <__sfp_lock_acquire>:
 8001724:	4801      	ldr	r0, [pc, #4]	; (800172c <__sfp_lock_acquire+0x8>)
 8001726:	f000 b8d8 	b.w	80018da <__retarget_lock_acquire_recursive>
 800172a:	bf00      	nop
 800172c:	20000590 	.word	0x20000590

08001730 <__sfp_lock_release>:
 8001730:	4801      	ldr	r0, [pc, #4]	; (8001738 <__sfp_lock_release+0x8>)
 8001732:	f000 b8d3 	b.w	80018dc <__retarget_lock_release_recursive>
 8001736:	bf00      	nop
 8001738:	20000590 	.word	0x20000590

0800173c <__sinit_lock_acquire>:
 800173c:	4801      	ldr	r0, [pc, #4]	; (8001744 <__sinit_lock_acquire+0x8>)
 800173e:	f000 b8cc 	b.w	80018da <__retarget_lock_acquire_recursive>
 8001742:	bf00      	nop
 8001744:	2000058b 	.word	0x2000058b

08001748 <__sinit_lock_release>:
 8001748:	4801      	ldr	r0, [pc, #4]	; (8001750 <__sinit_lock_release+0x8>)
 800174a:	f000 b8c7 	b.w	80018dc <__retarget_lock_release_recursive>
 800174e:	bf00      	nop
 8001750:	2000058b 	.word	0x2000058b

08001754 <__sinit>:
 8001754:	b510      	push	{r4, lr}
 8001756:	4604      	mov	r4, r0
 8001758:	f7ff fff0 	bl	800173c <__sinit_lock_acquire>
 800175c:	69a3      	ldr	r3, [r4, #24]
 800175e:	b11b      	cbz	r3, 8001768 <__sinit+0x14>
 8001760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001764:	f7ff bff0 	b.w	8001748 <__sinit_lock_release>
 8001768:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800176c:	6523      	str	r3, [r4, #80]	; 0x50
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <__sinit+0x68>)
 8001770:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <__sinit+0x6c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	62a2      	str	r2, [r4, #40]	; 0x28
 8001776:	42a3      	cmp	r3, r4
 8001778:	bf04      	itt	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	61a3      	streq	r3, [r4, #24]
 800177e:	4620      	mov	r0, r4
 8001780:	f000 f820 	bl	80017c4 <__sfp>
 8001784:	6060      	str	r0, [r4, #4]
 8001786:	4620      	mov	r0, r4
 8001788:	f000 f81c 	bl	80017c4 <__sfp>
 800178c:	60a0      	str	r0, [r4, #8]
 800178e:	4620      	mov	r0, r4
 8001790:	f000 f818 	bl	80017c4 <__sfp>
 8001794:	2200      	movs	r2, #0
 8001796:	60e0      	str	r0, [r4, #12]
 8001798:	2104      	movs	r1, #4
 800179a:	6860      	ldr	r0, [r4, #4]
 800179c:	f7ff ff82 	bl	80016a4 <std>
 80017a0:	68a0      	ldr	r0, [r4, #8]
 80017a2:	2201      	movs	r2, #1
 80017a4:	2109      	movs	r1, #9
 80017a6:	f7ff ff7d 	bl	80016a4 <std>
 80017aa:	68e0      	ldr	r0, [r4, #12]
 80017ac:	2202      	movs	r2, #2
 80017ae:	2112      	movs	r1, #18
 80017b0:	f7ff ff78 	bl	80016a4 <std>
 80017b4:	2301      	movs	r3, #1
 80017b6:	61a3      	str	r3, [r4, #24]
 80017b8:	e7d2      	b.n	8001760 <__sinit+0xc>
 80017ba:	bf00      	nop
 80017bc:	08002658 	.word	0x08002658
 80017c0:	080016ed 	.word	0x080016ed

080017c4 <__sfp>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4607      	mov	r7, r0
 80017c8:	f7ff ffac 	bl	8001724 <__sfp_lock_acquire>
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <__sfp+0x84>)
 80017ce:	681e      	ldr	r6, [r3, #0]
 80017d0:	69b3      	ldr	r3, [r6, #24]
 80017d2:	b913      	cbnz	r3, 80017da <__sfp+0x16>
 80017d4:	4630      	mov	r0, r6
 80017d6:	f7ff ffbd 	bl	8001754 <__sinit>
 80017da:	3648      	adds	r6, #72	; 0x48
 80017dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	d503      	bpl.n	80017ec <__sfp+0x28>
 80017e4:	6833      	ldr	r3, [r6, #0]
 80017e6:	b30b      	cbz	r3, 800182c <__sfp+0x68>
 80017e8:	6836      	ldr	r6, [r6, #0]
 80017ea:	e7f7      	b.n	80017dc <__sfp+0x18>
 80017ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017f0:	b9d5      	cbnz	r5, 8001828 <__sfp+0x64>
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <__sfp+0x88>)
 80017f4:	60e3      	str	r3, [r4, #12]
 80017f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80017fa:	6665      	str	r5, [r4, #100]	; 0x64
 80017fc:	f000 f86c 	bl	80018d8 <__retarget_lock_init_recursive>
 8001800:	f7ff ff96 	bl	8001730 <__sfp_lock_release>
 8001804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800180c:	6025      	str	r5, [r4, #0]
 800180e:	61a5      	str	r5, [r4, #24]
 8001810:	2208      	movs	r2, #8
 8001812:	4629      	mov	r1, r5
 8001814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001818:	f000 f861 	bl	80018de <memset>
 800181c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001824:	4620      	mov	r0, r4
 8001826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001828:	3468      	adds	r4, #104	; 0x68
 800182a:	e7d9      	b.n	80017e0 <__sfp+0x1c>
 800182c:	2104      	movs	r1, #4
 800182e:	4638      	mov	r0, r7
 8001830:	f7ff ff62 	bl	80016f8 <__sfmoreglue>
 8001834:	4604      	mov	r4, r0
 8001836:	6030      	str	r0, [r6, #0]
 8001838:	2800      	cmp	r0, #0
 800183a:	d1d5      	bne.n	80017e8 <__sfp+0x24>
 800183c:	f7ff ff78 	bl	8001730 <__sfp_lock_release>
 8001840:	230c      	movs	r3, #12
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	e7ee      	b.n	8001824 <__sfp+0x60>
 8001846:	bf00      	nop
 8001848:	08002658 	.word	0x08002658
 800184c:	ffff0001 	.word	0xffff0001

08001850 <_fwalk_reent>:
 8001850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001854:	4606      	mov	r6, r0
 8001856:	4688      	mov	r8, r1
 8001858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800185c:	2700      	movs	r7, #0
 800185e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001862:	f1b9 0901 	subs.w	r9, r9, #1
 8001866:	d505      	bpl.n	8001874 <_fwalk_reent+0x24>
 8001868:	6824      	ldr	r4, [r4, #0]
 800186a:	2c00      	cmp	r4, #0
 800186c:	d1f7      	bne.n	800185e <_fwalk_reent+0xe>
 800186e:	4638      	mov	r0, r7
 8001870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001874:	89ab      	ldrh	r3, [r5, #12]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d907      	bls.n	800188a <_fwalk_reent+0x3a>
 800187a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800187e:	3301      	adds	r3, #1
 8001880:	d003      	beq.n	800188a <_fwalk_reent+0x3a>
 8001882:	4629      	mov	r1, r5
 8001884:	4630      	mov	r0, r6
 8001886:	47c0      	blx	r8
 8001888:	4307      	orrs	r7, r0
 800188a:	3568      	adds	r5, #104	; 0x68
 800188c:	e7e9      	b.n	8001862 <_fwalk_reent+0x12>
	...

08001890 <__libc_init_array>:
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	4d0d      	ldr	r5, [pc, #52]	; (80018c8 <__libc_init_array+0x38>)
 8001894:	4c0d      	ldr	r4, [pc, #52]	; (80018cc <__libc_init_array+0x3c>)
 8001896:	1b64      	subs	r4, r4, r5
 8001898:	10a4      	asrs	r4, r4, #2
 800189a:	2600      	movs	r6, #0
 800189c:	42a6      	cmp	r6, r4
 800189e:	d109      	bne.n	80018b4 <__libc_init_array+0x24>
 80018a0:	4d0b      	ldr	r5, [pc, #44]	; (80018d0 <__libc_init_array+0x40>)
 80018a2:	4c0c      	ldr	r4, [pc, #48]	; (80018d4 <__libc_init_array+0x44>)
 80018a4:	f000 fe7e 	bl	80025a4 <_init>
 80018a8:	1b64      	subs	r4, r4, r5
 80018aa:	10a4      	asrs	r4, r4, #2
 80018ac:	2600      	movs	r6, #0
 80018ae:	42a6      	cmp	r6, r4
 80018b0:	d105      	bne.n	80018be <__libc_init_array+0x2e>
 80018b2:	bd70      	pop	{r4, r5, r6, pc}
 80018b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b8:	4798      	blx	r3
 80018ba:	3601      	adds	r6, #1
 80018bc:	e7ee      	b.n	800189c <__libc_init_array+0xc>
 80018be:	f855 3b04 	ldr.w	r3, [r5], #4
 80018c2:	4798      	blx	r3
 80018c4:	3601      	adds	r6, #1
 80018c6:	e7f2      	b.n	80018ae <__libc_init_array+0x1e>
 80018c8:	08002690 	.word	0x08002690
 80018cc:	08002690 	.word	0x08002690
 80018d0:	08002690 	.word	0x08002690
 80018d4:	08002694 	.word	0x08002694

080018d8 <__retarget_lock_init_recursive>:
 80018d8:	4770      	bx	lr

080018da <__retarget_lock_acquire_recursive>:
 80018da:	4770      	bx	lr

080018dc <__retarget_lock_release_recursive>:
 80018dc:	4770      	bx	lr

080018de <memset>:
 80018de:	4402      	add	r2, r0
 80018e0:	4603      	mov	r3, r0
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d100      	bne.n	80018e8 <memset+0xa>
 80018e6:	4770      	bx	lr
 80018e8:	f803 1b01 	strb.w	r1, [r3], #1
 80018ec:	e7f9      	b.n	80018e2 <memset+0x4>
	...

080018f0 <_malloc_r>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	1ccd      	adds	r5, r1, #3
 80018f4:	f025 0503 	bic.w	r5, r5, #3
 80018f8:	3508      	adds	r5, #8
 80018fa:	2d0c      	cmp	r5, #12
 80018fc:	bf38      	it	cc
 80018fe:	250c      	movcc	r5, #12
 8001900:	2d00      	cmp	r5, #0
 8001902:	4606      	mov	r6, r0
 8001904:	db01      	blt.n	800190a <_malloc_r+0x1a>
 8001906:	42a9      	cmp	r1, r5
 8001908:	d903      	bls.n	8001912 <_malloc_r+0x22>
 800190a:	230c      	movs	r3, #12
 800190c:	6033      	str	r3, [r6, #0]
 800190e:	2000      	movs	r0, #0
 8001910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001912:	f000 facd 	bl	8001eb0 <__malloc_lock>
 8001916:	4921      	ldr	r1, [pc, #132]	; (800199c <_malloc_r+0xac>)
 8001918:	680a      	ldr	r2, [r1, #0]
 800191a:	4614      	mov	r4, r2
 800191c:	b99c      	cbnz	r4, 8001946 <_malloc_r+0x56>
 800191e:	4f20      	ldr	r7, [pc, #128]	; (80019a0 <_malloc_r+0xb0>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b923      	cbnz	r3, 800192e <_malloc_r+0x3e>
 8001924:	4621      	mov	r1, r4
 8001926:	4630      	mov	r0, r6
 8001928:	f000 f854 	bl	80019d4 <_sbrk_r>
 800192c:	6038      	str	r0, [r7, #0]
 800192e:	4629      	mov	r1, r5
 8001930:	4630      	mov	r0, r6
 8001932:	f000 f84f 	bl	80019d4 <_sbrk_r>
 8001936:	1c43      	adds	r3, r0, #1
 8001938:	d123      	bne.n	8001982 <_malloc_r+0x92>
 800193a:	230c      	movs	r3, #12
 800193c:	6033      	str	r3, [r6, #0]
 800193e:	4630      	mov	r0, r6
 8001940:	f000 fabc 	bl	8001ebc <__malloc_unlock>
 8001944:	e7e3      	b.n	800190e <_malloc_r+0x1e>
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	1b5b      	subs	r3, r3, r5
 800194a:	d417      	bmi.n	800197c <_malloc_r+0x8c>
 800194c:	2b0b      	cmp	r3, #11
 800194e:	d903      	bls.n	8001958 <_malloc_r+0x68>
 8001950:	6023      	str	r3, [r4, #0]
 8001952:	441c      	add	r4, r3
 8001954:	6025      	str	r5, [r4, #0]
 8001956:	e004      	b.n	8001962 <_malloc_r+0x72>
 8001958:	6863      	ldr	r3, [r4, #4]
 800195a:	42a2      	cmp	r2, r4
 800195c:	bf0c      	ite	eq
 800195e:	600b      	streq	r3, [r1, #0]
 8001960:	6053      	strne	r3, [r2, #4]
 8001962:	4630      	mov	r0, r6
 8001964:	f000 faaa 	bl	8001ebc <__malloc_unlock>
 8001968:	f104 000b 	add.w	r0, r4, #11
 800196c:	1d23      	adds	r3, r4, #4
 800196e:	f020 0007 	bic.w	r0, r0, #7
 8001972:	1ac2      	subs	r2, r0, r3
 8001974:	d0cc      	beq.n	8001910 <_malloc_r+0x20>
 8001976:	1a1b      	subs	r3, r3, r0
 8001978:	50a3      	str	r3, [r4, r2]
 800197a:	e7c9      	b.n	8001910 <_malloc_r+0x20>
 800197c:	4622      	mov	r2, r4
 800197e:	6864      	ldr	r4, [r4, #4]
 8001980:	e7cc      	b.n	800191c <_malloc_r+0x2c>
 8001982:	1cc4      	adds	r4, r0, #3
 8001984:	f024 0403 	bic.w	r4, r4, #3
 8001988:	42a0      	cmp	r0, r4
 800198a:	d0e3      	beq.n	8001954 <_malloc_r+0x64>
 800198c:	1a21      	subs	r1, r4, r0
 800198e:	4630      	mov	r0, r6
 8001990:	f000 f820 	bl	80019d4 <_sbrk_r>
 8001994:	3001      	adds	r0, #1
 8001996:	d1dd      	bne.n	8001954 <_malloc_r+0x64>
 8001998:	e7cf      	b.n	800193a <_malloc_r+0x4a>
 800199a:	bf00      	nop
 800199c:	2000055c 	.word	0x2000055c
 80019a0:	20000560 	.word	0x20000560

080019a4 <iprintf>:
 80019a4:	b40f      	push	{r0, r1, r2, r3}
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <iprintf+0x2c>)
 80019a8:	b513      	push	{r0, r1, r4, lr}
 80019aa:	681c      	ldr	r4, [r3, #0]
 80019ac:	b124      	cbz	r4, 80019b8 <iprintf+0x14>
 80019ae:	69a3      	ldr	r3, [r4, #24]
 80019b0:	b913      	cbnz	r3, 80019b8 <iprintf+0x14>
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fece 	bl	8001754 <__sinit>
 80019b8:	ab05      	add	r3, sp, #20
 80019ba:	9a04      	ldr	r2, [sp, #16]
 80019bc:	68a1      	ldr	r1, [r4, #8]
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	4620      	mov	r0, r4
 80019c2:	f000 faf7 	bl	8001fb4 <_vfiprintf_r>
 80019c6:	b002      	add	sp, #8
 80019c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019cc:	b004      	add	sp, #16
 80019ce:	4770      	bx	lr
 80019d0:	2000042c 	.word	0x2000042c

080019d4 <_sbrk_r>:
 80019d4:	b538      	push	{r3, r4, r5, lr}
 80019d6:	4d06      	ldr	r5, [pc, #24]	; (80019f0 <_sbrk_r+0x1c>)
 80019d8:	2300      	movs	r3, #0
 80019da:	4604      	mov	r4, r0
 80019dc:	4608      	mov	r0, r1
 80019de:	602b      	str	r3, [r5, #0]
 80019e0:	f7fe fd2c 	bl	800043c <_sbrk>
 80019e4:	1c43      	adds	r3, r0, #1
 80019e6:	d102      	bne.n	80019ee <_sbrk_r+0x1a>
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	b103      	cbz	r3, 80019ee <_sbrk_r+0x1a>
 80019ec:	6023      	str	r3, [r4, #0]
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
 80019f0:	20000594 	.word	0x20000594

080019f4 <__sread>:
 80019f4:	b510      	push	{r4, lr}
 80019f6:	460c      	mov	r4, r1
 80019f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019fc:	f000 fd9e 	bl	800253c <_read_r>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	bfab      	itete	ge
 8001a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a06:	89a3      	ldrhlt	r3, [r4, #12]
 8001a08:	181b      	addge	r3, r3, r0
 8001a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a0e:	bfac      	ite	ge
 8001a10:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a12:	81a3      	strhlt	r3, [r4, #12]
 8001a14:	bd10      	pop	{r4, pc}

08001a16 <__swrite>:
 8001a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a1a:	461f      	mov	r7, r3
 8001a1c:	898b      	ldrh	r3, [r1, #12]
 8001a1e:	05db      	lsls	r3, r3, #23
 8001a20:	4605      	mov	r5, r0
 8001a22:	460c      	mov	r4, r1
 8001a24:	4616      	mov	r6, r2
 8001a26:	d505      	bpl.n	8001a34 <__swrite+0x1e>
 8001a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f000 f9c8 	bl	8001dc4 <_lseek_r>
 8001a34:	89a3      	ldrh	r3, [r4, #12]
 8001a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a3e:	81a3      	strh	r3, [r4, #12]
 8001a40:	4632      	mov	r2, r6
 8001a42:	463b      	mov	r3, r7
 8001a44:	4628      	mov	r0, r5
 8001a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a4a:	f000 b869 	b.w	8001b20 <_write_r>

08001a4e <__sseek>:
 8001a4e:	b510      	push	{r4, lr}
 8001a50:	460c      	mov	r4, r1
 8001a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a56:	f000 f9b5 	bl	8001dc4 <_lseek_r>
 8001a5a:	1c43      	adds	r3, r0, #1
 8001a5c:	89a3      	ldrh	r3, [r4, #12]
 8001a5e:	bf15      	itete	ne
 8001a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8001a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001a6a:	81a3      	strheq	r3, [r4, #12]
 8001a6c:	bf18      	it	ne
 8001a6e:	81a3      	strhne	r3, [r4, #12]
 8001a70:	bd10      	pop	{r4, pc}

08001a72 <__sclose>:
 8001a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a76:	f000 b8d3 	b.w	8001c20 <_close_r>
	...

08001a7c <__swbuf_r>:
 8001a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7e:	460e      	mov	r6, r1
 8001a80:	4614      	mov	r4, r2
 8001a82:	4605      	mov	r5, r0
 8001a84:	b118      	cbz	r0, 8001a8e <__swbuf_r+0x12>
 8001a86:	6983      	ldr	r3, [r0, #24]
 8001a88:	b90b      	cbnz	r3, 8001a8e <__swbuf_r+0x12>
 8001a8a:	f7ff fe63 	bl	8001754 <__sinit>
 8001a8e:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <__swbuf_r+0x98>)
 8001a90:	429c      	cmp	r4, r3
 8001a92:	d12b      	bne.n	8001aec <__swbuf_r+0x70>
 8001a94:	686c      	ldr	r4, [r5, #4]
 8001a96:	69a3      	ldr	r3, [r4, #24]
 8001a98:	60a3      	str	r3, [r4, #8]
 8001a9a:	89a3      	ldrh	r3, [r4, #12]
 8001a9c:	071a      	lsls	r2, r3, #28
 8001a9e:	d52f      	bpl.n	8001b00 <__swbuf_r+0x84>
 8001aa0:	6923      	ldr	r3, [r4, #16]
 8001aa2:	b36b      	cbz	r3, 8001b00 <__swbuf_r+0x84>
 8001aa4:	6923      	ldr	r3, [r4, #16]
 8001aa6:	6820      	ldr	r0, [r4, #0]
 8001aa8:	1ac0      	subs	r0, r0, r3
 8001aaa:	6963      	ldr	r3, [r4, #20]
 8001aac:	b2f6      	uxtb	r6, r6
 8001aae:	4283      	cmp	r3, r0
 8001ab0:	4637      	mov	r7, r6
 8001ab2:	dc04      	bgt.n	8001abe <__swbuf_r+0x42>
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 f948 	bl	8001d4c <_fflush_r>
 8001abc:	bb30      	cbnz	r0, 8001b0c <__swbuf_r+0x90>
 8001abe:	68a3      	ldr	r3, [r4, #8]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	60a3      	str	r3, [r4, #8]
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	6022      	str	r2, [r4, #0]
 8001aca:	701e      	strb	r6, [r3, #0]
 8001acc:	6963      	ldr	r3, [r4, #20]
 8001ace:	3001      	adds	r0, #1
 8001ad0:	4283      	cmp	r3, r0
 8001ad2:	d004      	beq.n	8001ade <__swbuf_r+0x62>
 8001ad4:	89a3      	ldrh	r3, [r4, #12]
 8001ad6:	07db      	lsls	r3, r3, #31
 8001ad8:	d506      	bpl.n	8001ae8 <__swbuf_r+0x6c>
 8001ada:	2e0a      	cmp	r6, #10
 8001adc:	d104      	bne.n	8001ae8 <__swbuf_r+0x6c>
 8001ade:	4621      	mov	r1, r4
 8001ae0:	4628      	mov	r0, r5
 8001ae2:	f000 f933 	bl	8001d4c <_fflush_r>
 8001ae6:	b988      	cbnz	r0, 8001b0c <__swbuf_r+0x90>
 8001ae8:	4638      	mov	r0, r7
 8001aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <__swbuf_r+0x9c>)
 8001aee:	429c      	cmp	r4, r3
 8001af0:	d101      	bne.n	8001af6 <__swbuf_r+0x7a>
 8001af2:	68ac      	ldr	r4, [r5, #8]
 8001af4:	e7cf      	b.n	8001a96 <__swbuf_r+0x1a>
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <__swbuf_r+0xa0>)
 8001af8:	429c      	cmp	r4, r3
 8001afa:	bf08      	it	eq
 8001afc:	68ec      	ldreq	r4, [r5, #12]
 8001afe:	e7ca      	b.n	8001a96 <__swbuf_r+0x1a>
 8001b00:	4621      	mov	r1, r4
 8001b02:	4628      	mov	r0, r5
 8001b04:	f000 f81e 	bl	8001b44 <__swsetup_r>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	d0cb      	beq.n	8001aa4 <__swbuf_r+0x28>
 8001b0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001b10:	e7ea      	b.n	8001ae8 <__swbuf_r+0x6c>
 8001b12:	bf00      	nop
 8001b14:	08002618 	.word	0x08002618
 8001b18:	08002638 	.word	0x08002638
 8001b1c:	080025f8 	.word	0x080025f8

08001b20 <_write_r>:
 8001b20:	b538      	push	{r3, r4, r5, lr}
 8001b22:	4d07      	ldr	r5, [pc, #28]	; (8001b40 <_write_r+0x20>)
 8001b24:	4604      	mov	r4, r0
 8001b26:	4608      	mov	r0, r1
 8001b28:	4611      	mov	r1, r2
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	602a      	str	r2, [r5, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f7ff fbbc 	bl	80012ac <_write>
 8001b34:	1c43      	adds	r3, r0, #1
 8001b36:	d102      	bne.n	8001b3e <_write_r+0x1e>
 8001b38:	682b      	ldr	r3, [r5, #0]
 8001b3a:	b103      	cbz	r3, 8001b3e <_write_r+0x1e>
 8001b3c:	6023      	str	r3, [r4, #0]
 8001b3e:	bd38      	pop	{r3, r4, r5, pc}
 8001b40:	20000594 	.word	0x20000594

08001b44 <__swsetup_r>:
 8001b44:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <__swsetup_r+0xcc>)
 8001b46:	b570      	push	{r4, r5, r6, lr}
 8001b48:	681d      	ldr	r5, [r3, #0]
 8001b4a:	4606      	mov	r6, r0
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	b125      	cbz	r5, 8001b5a <__swsetup_r+0x16>
 8001b50:	69ab      	ldr	r3, [r5, #24]
 8001b52:	b913      	cbnz	r3, 8001b5a <__swsetup_r+0x16>
 8001b54:	4628      	mov	r0, r5
 8001b56:	f7ff fdfd 	bl	8001754 <__sinit>
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <__swsetup_r+0xd0>)
 8001b5c:	429c      	cmp	r4, r3
 8001b5e:	d10f      	bne.n	8001b80 <__swsetup_r+0x3c>
 8001b60:	686c      	ldr	r4, [r5, #4]
 8001b62:	89a3      	ldrh	r3, [r4, #12]
 8001b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b68:	0719      	lsls	r1, r3, #28
 8001b6a:	d42c      	bmi.n	8001bc6 <__swsetup_r+0x82>
 8001b6c:	06dd      	lsls	r5, r3, #27
 8001b6e:	d411      	bmi.n	8001b94 <__swsetup_r+0x50>
 8001b70:	2309      	movs	r3, #9
 8001b72:	6033      	str	r3, [r6, #0]
 8001b74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b78:	81a3      	strh	r3, [r4, #12]
 8001b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b7e:	e03e      	b.n	8001bfe <__swsetup_r+0xba>
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <__swsetup_r+0xd4>)
 8001b82:	429c      	cmp	r4, r3
 8001b84:	d101      	bne.n	8001b8a <__swsetup_r+0x46>
 8001b86:	68ac      	ldr	r4, [r5, #8]
 8001b88:	e7eb      	b.n	8001b62 <__swsetup_r+0x1e>
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <__swsetup_r+0xd8>)
 8001b8c:	429c      	cmp	r4, r3
 8001b8e:	bf08      	it	eq
 8001b90:	68ec      	ldreq	r4, [r5, #12]
 8001b92:	e7e6      	b.n	8001b62 <__swsetup_r+0x1e>
 8001b94:	0758      	lsls	r0, r3, #29
 8001b96:	d512      	bpl.n	8001bbe <__swsetup_r+0x7a>
 8001b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b9a:	b141      	cbz	r1, 8001bae <__swsetup_r+0x6a>
 8001b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ba0:	4299      	cmp	r1, r3
 8001ba2:	d002      	beq.n	8001baa <__swsetup_r+0x66>
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	f000 f98f 	bl	8001ec8 <_free_r>
 8001baa:	2300      	movs	r3, #0
 8001bac:	6363      	str	r3, [r4, #52]	; 0x34
 8001bae:	89a3      	ldrh	r3, [r4, #12]
 8001bb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001bb4:	81a3      	strh	r3, [r4, #12]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	6063      	str	r3, [r4, #4]
 8001bba:	6923      	ldr	r3, [r4, #16]
 8001bbc:	6023      	str	r3, [r4, #0]
 8001bbe:	89a3      	ldrh	r3, [r4, #12]
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	81a3      	strh	r3, [r4, #12]
 8001bc6:	6923      	ldr	r3, [r4, #16]
 8001bc8:	b94b      	cbnz	r3, 8001bde <__swsetup_r+0x9a>
 8001bca:	89a3      	ldrh	r3, [r4, #12]
 8001bcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd4:	d003      	beq.n	8001bde <__swsetup_r+0x9a>
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	4630      	mov	r0, r6
 8001bda:	f000 f929 	bl	8001e30 <__smakebuf_r>
 8001bde:	89a0      	ldrh	r0, [r4, #12]
 8001be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001be4:	f010 0301 	ands.w	r3, r0, #1
 8001be8:	d00a      	beq.n	8001c00 <__swsetup_r+0xbc>
 8001bea:	2300      	movs	r3, #0
 8001bec:	60a3      	str	r3, [r4, #8]
 8001bee:	6963      	ldr	r3, [r4, #20]
 8001bf0:	425b      	negs	r3, r3
 8001bf2:	61a3      	str	r3, [r4, #24]
 8001bf4:	6923      	ldr	r3, [r4, #16]
 8001bf6:	b943      	cbnz	r3, 8001c0a <__swsetup_r+0xc6>
 8001bf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001bfc:	d1ba      	bne.n	8001b74 <__swsetup_r+0x30>
 8001bfe:	bd70      	pop	{r4, r5, r6, pc}
 8001c00:	0781      	lsls	r1, r0, #30
 8001c02:	bf58      	it	pl
 8001c04:	6963      	ldrpl	r3, [r4, #20]
 8001c06:	60a3      	str	r3, [r4, #8]
 8001c08:	e7f4      	b.n	8001bf4 <__swsetup_r+0xb0>
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	e7f7      	b.n	8001bfe <__swsetup_r+0xba>
 8001c0e:	bf00      	nop
 8001c10:	2000042c 	.word	0x2000042c
 8001c14:	08002618 	.word	0x08002618
 8001c18:	08002638 	.word	0x08002638
 8001c1c:	080025f8 	.word	0x080025f8

08001c20 <_close_r>:
 8001c20:	b538      	push	{r3, r4, r5, lr}
 8001c22:	4d06      	ldr	r5, [pc, #24]	; (8001c3c <_close_r+0x1c>)
 8001c24:	2300      	movs	r3, #0
 8001c26:	4604      	mov	r4, r0
 8001c28:	4608      	mov	r0, r1
 8001c2a:	602b      	str	r3, [r5, #0]
 8001c2c:	f7ff fb6c 	bl	8001308 <_close>
 8001c30:	1c43      	adds	r3, r0, #1
 8001c32:	d102      	bne.n	8001c3a <_close_r+0x1a>
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	b103      	cbz	r3, 8001c3a <_close_r+0x1a>
 8001c38:	6023      	str	r3, [r4, #0]
 8001c3a:	bd38      	pop	{r3, r4, r5, pc}
 8001c3c:	20000594 	.word	0x20000594

08001c40 <__sflush_r>:
 8001c40:	898a      	ldrh	r2, [r1, #12]
 8001c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c46:	4605      	mov	r5, r0
 8001c48:	0710      	lsls	r0, r2, #28
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	d458      	bmi.n	8001d00 <__sflush_r+0xc0>
 8001c4e:	684b      	ldr	r3, [r1, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dc05      	bgt.n	8001c60 <__sflush_r+0x20>
 8001c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	dc02      	bgt.n	8001c60 <__sflush_r+0x20>
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c62:	2e00      	cmp	r6, #0
 8001c64:	d0f9      	beq.n	8001c5a <__sflush_r+0x1a>
 8001c66:	2300      	movs	r3, #0
 8001c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c6c:	682f      	ldr	r7, [r5, #0]
 8001c6e:	602b      	str	r3, [r5, #0]
 8001c70:	d032      	beq.n	8001cd8 <__sflush_r+0x98>
 8001c72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c74:	89a3      	ldrh	r3, [r4, #12]
 8001c76:	075a      	lsls	r2, r3, #29
 8001c78:	d505      	bpl.n	8001c86 <__sflush_r+0x46>
 8001c7a:	6863      	ldr	r3, [r4, #4]
 8001c7c:	1ac0      	subs	r0, r0, r3
 8001c7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c80:	b10b      	cbz	r3, 8001c86 <__sflush_r+0x46>
 8001c82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c84:	1ac0      	subs	r0, r0, r3
 8001c86:	2300      	movs	r3, #0
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c8c:	6a21      	ldr	r1, [r4, #32]
 8001c8e:	4628      	mov	r0, r5
 8001c90:	47b0      	blx	r6
 8001c92:	1c43      	adds	r3, r0, #1
 8001c94:	89a3      	ldrh	r3, [r4, #12]
 8001c96:	d106      	bne.n	8001ca6 <__sflush_r+0x66>
 8001c98:	6829      	ldr	r1, [r5, #0]
 8001c9a:	291d      	cmp	r1, #29
 8001c9c:	d82c      	bhi.n	8001cf8 <__sflush_r+0xb8>
 8001c9e:	4a2a      	ldr	r2, [pc, #168]	; (8001d48 <__sflush_r+0x108>)
 8001ca0:	40ca      	lsrs	r2, r1
 8001ca2:	07d6      	lsls	r6, r2, #31
 8001ca4:	d528      	bpl.n	8001cf8 <__sflush_r+0xb8>
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	6062      	str	r2, [r4, #4]
 8001caa:	04d9      	lsls	r1, r3, #19
 8001cac:	6922      	ldr	r2, [r4, #16]
 8001cae:	6022      	str	r2, [r4, #0]
 8001cb0:	d504      	bpl.n	8001cbc <__sflush_r+0x7c>
 8001cb2:	1c42      	adds	r2, r0, #1
 8001cb4:	d101      	bne.n	8001cba <__sflush_r+0x7a>
 8001cb6:	682b      	ldr	r3, [r5, #0]
 8001cb8:	b903      	cbnz	r3, 8001cbc <__sflush_r+0x7c>
 8001cba:	6560      	str	r0, [r4, #84]	; 0x54
 8001cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cbe:	602f      	str	r7, [r5, #0]
 8001cc0:	2900      	cmp	r1, #0
 8001cc2:	d0ca      	beq.n	8001c5a <__sflush_r+0x1a>
 8001cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cc8:	4299      	cmp	r1, r3
 8001cca:	d002      	beq.n	8001cd2 <__sflush_r+0x92>
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f000 f8fb 	bl	8001ec8 <_free_r>
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	6360      	str	r0, [r4, #52]	; 0x34
 8001cd6:	e7c1      	b.n	8001c5c <__sflush_r+0x1c>
 8001cd8:	6a21      	ldr	r1, [r4, #32]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	4628      	mov	r0, r5
 8001cde:	47b0      	blx	r6
 8001ce0:	1c41      	adds	r1, r0, #1
 8001ce2:	d1c7      	bne.n	8001c74 <__sflush_r+0x34>
 8001ce4:	682b      	ldr	r3, [r5, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0c4      	beq.n	8001c74 <__sflush_r+0x34>
 8001cea:	2b1d      	cmp	r3, #29
 8001cec:	d001      	beq.n	8001cf2 <__sflush_r+0xb2>
 8001cee:	2b16      	cmp	r3, #22
 8001cf0:	d101      	bne.n	8001cf6 <__sflush_r+0xb6>
 8001cf2:	602f      	str	r7, [r5, #0]
 8001cf4:	e7b1      	b.n	8001c5a <__sflush_r+0x1a>
 8001cf6:	89a3      	ldrh	r3, [r4, #12]
 8001cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cfc:	81a3      	strh	r3, [r4, #12]
 8001cfe:	e7ad      	b.n	8001c5c <__sflush_r+0x1c>
 8001d00:	690f      	ldr	r7, [r1, #16]
 8001d02:	2f00      	cmp	r7, #0
 8001d04:	d0a9      	beq.n	8001c5a <__sflush_r+0x1a>
 8001d06:	0793      	lsls	r3, r2, #30
 8001d08:	680e      	ldr	r6, [r1, #0]
 8001d0a:	bf08      	it	eq
 8001d0c:	694b      	ldreq	r3, [r1, #20]
 8001d0e:	600f      	str	r7, [r1, #0]
 8001d10:	bf18      	it	ne
 8001d12:	2300      	movne	r3, #0
 8001d14:	eba6 0807 	sub.w	r8, r6, r7
 8001d18:	608b      	str	r3, [r1, #8]
 8001d1a:	f1b8 0f00 	cmp.w	r8, #0
 8001d1e:	dd9c      	ble.n	8001c5a <__sflush_r+0x1a>
 8001d20:	6a21      	ldr	r1, [r4, #32]
 8001d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d24:	4643      	mov	r3, r8
 8001d26:	463a      	mov	r2, r7
 8001d28:	4628      	mov	r0, r5
 8001d2a:	47b0      	blx	r6
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	dc06      	bgt.n	8001d3e <__sflush_r+0xfe>
 8001d30:	89a3      	ldrh	r3, [r4, #12]
 8001d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d36:	81a3      	strh	r3, [r4, #12]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d3c:	e78e      	b.n	8001c5c <__sflush_r+0x1c>
 8001d3e:	4407      	add	r7, r0
 8001d40:	eba8 0800 	sub.w	r8, r8, r0
 8001d44:	e7e9      	b.n	8001d1a <__sflush_r+0xda>
 8001d46:	bf00      	nop
 8001d48:	20400001 	.word	0x20400001

08001d4c <_fflush_r>:
 8001d4c:	b538      	push	{r3, r4, r5, lr}
 8001d4e:	690b      	ldr	r3, [r1, #16]
 8001d50:	4605      	mov	r5, r0
 8001d52:	460c      	mov	r4, r1
 8001d54:	b913      	cbnz	r3, 8001d5c <_fflush_r+0x10>
 8001d56:	2500      	movs	r5, #0
 8001d58:	4628      	mov	r0, r5
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
 8001d5c:	b118      	cbz	r0, 8001d66 <_fflush_r+0x1a>
 8001d5e:	6983      	ldr	r3, [r0, #24]
 8001d60:	b90b      	cbnz	r3, 8001d66 <_fflush_r+0x1a>
 8001d62:	f7ff fcf7 	bl	8001754 <__sinit>
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <_fflush_r+0x6c>)
 8001d68:	429c      	cmp	r4, r3
 8001d6a:	d11b      	bne.n	8001da4 <_fflush_r+0x58>
 8001d6c:	686c      	ldr	r4, [r5, #4]
 8001d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0ef      	beq.n	8001d56 <_fflush_r+0xa>
 8001d76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d78:	07d0      	lsls	r0, r2, #31
 8001d7a:	d404      	bmi.n	8001d86 <_fflush_r+0x3a>
 8001d7c:	0599      	lsls	r1, r3, #22
 8001d7e:	d402      	bmi.n	8001d86 <_fflush_r+0x3a>
 8001d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d82:	f7ff fdaa 	bl	80018da <__retarget_lock_acquire_recursive>
 8001d86:	4628      	mov	r0, r5
 8001d88:	4621      	mov	r1, r4
 8001d8a:	f7ff ff59 	bl	8001c40 <__sflush_r>
 8001d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d90:	07da      	lsls	r2, r3, #31
 8001d92:	4605      	mov	r5, r0
 8001d94:	d4e0      	bmi.n	8001d58 <_fflush_r+0xc>
 8001d96:	89a3      	ldrh	r3, [r4, #12]
 8001d98:	059b      	lsls	r3, r3, #22
 8001d9a:	d4dd      	bmi.n	8001d58 <_fflush_r+0xc>
 8001d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d9e:	f7ff fd9d 	bl	80018dc <__retarget_lock_release_recursive>
 8001da2:	e7d9      	b.n	8001d58 <_fflush_r+0xc>
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <_fflush_r+0x70>)
 8001da6:	429c      	cmp	r4, r3
 8001da8:	d101      	bne.n	8001dae <_fflush_r+0x62>
 8001daa:	68ac      	ldr	r4, [r5, #8]
 8001dac:	e7df      	b.n	8001d6e <_fflush_r+0x22>
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <_fflush_r+0x74>)
 8001db0:	429c      	cmp	r4, r3
 8001db2:	bf08      	it	eq
 8001db4:	68ec      	ldreq	r4, [r5, #12]
 8001db6:	e7da      	b.n	8001d6e <_fflush_r+0x22>
 8001db8:	08002618 	.word	0x08002618
 8001dbc:	08002638 	.word	0x08002638
 8001dc0:	080025f8 	.word	0x080025f8

08001dc4 <_lseek_r>:
 8001dc4:	b538      	push	{r3, r4, r5, lr}
 8001dc6:	4d07      	ldr	r5, [pc, #28]	; (8001de4 <_lseek_r+0x20>)
 8001dc8:	4604      	mov	r4, r0
 8001dca:	4608      	mov	r0, r1
 8001dcc:	4611      	mov	r1, r2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	602a      	str	r2, [r5, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f7ff fa58 	bl	8001288 <_lseek>
 8001dd8:	1c43      	adds	r3, r0, #1
 8001dda:	d102      	bne.n	8001de2 <_lseek_r+0x1e>
 8001ddc:	682b      	ldr	r3, [r5, #0]
 8001dde:	b103      	cbz	r3, 8001de2 <_lseek_r+0x1e>
 8001de0:	6023      	str	r3, [r4, #0]
 8001de2:	bd38      	pop	{r3, r4, r5, pc}
 8001de4:	20000594 	.word	0x20000594

08001de8 <__swhatbuf_r>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	460e      	mov	r6, r1
 8001dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df0:	2900      	cmp	r1, #0
 8001df2:	b096      	sub	sp, #88	; 0x58
 8001df4:	4614      	mov	r4, r2
 8001df6:	461d      	mov	r5, r3
 8001df8:	da07      	bge.n	8001e0a <__swhatbuf_r+0x22>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	602b      	str	r3, [r5, #0]
 8001dfe:	89b3      	ldrh	r3, [r6, #12]
 8001e00:	061a      	lsls	r2, r3, #24
 8001e02:	d410      	bmi.n	8001e26 <__swhatbuf_r+0x3e>
 8001e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e08:	e00e      	b.n	8001e28 <__swhatbuf_r+0x40>
 8001e0a:	466a      	mov	r2, sp
 8001e0c:	f000 fba8 	bl	8002560 <_fstat_r>
 8001e10:	2800      	cmp	r0, #0
 8001e12:	dbf2      	blt.n	8001dfa <__swhatbuf_r+0x12>
 8001e14:	9a01      	ldr	r2, [sp, #4]
 8001e16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e1e:	425a      	negs	r2, r3
 8001e20:	415a      	adcs	r2, r3
 8001e22:	602a      	str	r2, [r5, #0]
 8001e24:	e7ee      	b.n	8001e04 <__swhatbuf_r+0x1c>
 8001e26:	2340      	movs	r3, #64	; 0x40
 8001e28:	2000      	movs	r0, #0
 8001e2a:	6023      	str	r3, [r4, #0]
 8001e2c:	b016      	add	sp, #88	; 0x58
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}

08001e30 <__smakebuf_r>:
 8001e30:	898b      	ldrh	r3, [r1, #12]
 8001e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e34:	079d      	lsls	r5, r3, #30
 8001e36:	4606      	mov	r6, r0
 8001e38:	460c      	mov	r4, r1
 8001e3a:	d507      	bpl.n	8001e4c <__smakebuf_r+0x1c>
 8001e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e40:	6023      	str	r3, [r4, #0]
 8001e42:	6123      	str	r3, [r4, #16]
 8001e44:	2301      	movs	r3, #1
 8001e46:	6163      	str	r3, [r4, #20]
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd70      	pop	{r4, r5, r6, pc}
 8001e4c:	ab01      	add	r3, sp, #4
 8001e4e:	466a      	mov	r2, sp
 8001e50:	f7ff ffca 	bl	8001de8 <__swhatbuf_r>
 8001e54:	9900      	ldr	r1, [sp, #0]
 8001e56:	4605      	mov	r5, r0
 8001e58:	4630      	mov	r0, r6
 8001e5a:	f7ff fd49 	bl	80018f0 <_malloc_r>
 8001e5e:	b948      	cbnz	r0, 8001e74 <__smakebuf_r+0x44>
 8001e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e64:	059a      	lsls	r2, r3, #22
 8001e66:	d4ef      	bmi.n	8001e48 <__smakebuf_r+0x18>
 8001e68:	f023 0303 	bic.w	r3, r3, #3
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	81a3      	strh	r3, [r4, #12]
 8001e72:	e7e3      	b.n	8001e3c <__smakebuf_r+0xc>
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <__smakebuf_r+0x7c>)
 8001e76:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e78:	89a3      	ldrh	r3, [r4, #12]
 8001e7a:	6020      	str	r0, [r4, #0]
 8001e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e80:	81a3      	strh	r3, [r4, #12]
 8001e82:	9b00      	ldr	r3, [sp, #0]
 8001e84:	6163      	str	r3, [r4, #20]
 8001e86:	9b01      	ldr	r3, [sp, #4]
 8001e88:	6120      	str	r0, [r4, #16]
 8001e8a:	b15b      	cbz	r3, 8001ea4 <__smakebuf_r+0x74>
 8001e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e90:	4630      	mov	r0, r6
 8001e92:	f000 fb77 	bl	8002584 <_isatty_r>
 8001e96:	b128      	cbz	r0, 8001ea4 <__smakebuf_r+0x74>
 8001e98:	89a3      	ldrh	r3, [r4, #12]
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	81a3      	strh	r3, [r4, #12]
 8001ea4:	89a0      	ldrh	r0, [r4, #12]
 8001ea6:	4305      	orrs	r5, r0
 8001ea8:	81a5      	strh	r5, [r4, #12]
 8001eaa:	e7cd      	b.n	8001e48 <__smakebuf_r+0x18>
 8001eac:	080016ed 	.word	0x080016ed

08001eb0 <__malloc_lock>:
 8001eb0:	4801      	ldr	r0, [pc, #4]	; (8001eb8 <__malloc_lock+0x8>)
 8001eb2:	f7ff bd12 	b.w	80018da <__retarget_lock_acquire_recursive>
 8001eb6:	bf00      	nop
 8001eb8:	2000058c 	.word	0x2000058c

08001ebc <__malloc_unlock>:
 8001ebc:	4801      	ldr	r0, [pc, #4]	; (8001ec4 <__malloc_unlock+0x8>)
 8001ebe:	f7ff bd0d 	b.w	80018dc <__retarget_lock_release_recursive>
 8001ec2:	bf00      	nop
 8001ec4:	2000058c 	.word	0x2000058c

08001ec8 <_free_r>:
 8001ec8:	b538      	push	{r3, r4, r5, lr}
 8001eca:	4605      	mov	r5, r0
 8001ecc:	2900      	cmp	r1, #0
 8001ece:	d045      	beq.n	8001f5c <_free_r+0x94>
 8001ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ed4:	1f0c      	subs	r4, r1, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bfb8      	it	lt
 8001eda:	18e4      	addlt	r4, r4, r3
 8001edc:	f7ff ffe8 	bl	8001eb0 <__malloc_lock>
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <_free_r+0x98>)
 8001ee2:	6813      	ldr	r3, [r2, #0]
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	b933      	cbnz	r3, 8001ef6 <_free_r+0x2e>
 8001ee8:	6063      	str	r3, [r4, #4]
 8001eea:	6014      	str	r4, [r2, #0]
 8001eec:	4628      	mov	r0, r5
 8001eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ef2:	f7ff bfe3 	b.w	8001ebc <__malloc_unlock>
 8001ef6:	42a3      	cmp	r3, r4
 8001ef8:	d90b      	bls.n	8001f12 <_free_r+0x4a>
 8001efa:	6821      	ldr	r1, [r4, #0]
 8001efc:	1862      	adds	r2, r4, r1
 8001efe:	4293      	cmp	r3, r2
 8001f00:	bf04      	itt	eq
 8001f02:	681a      	ldreq	r2, [r3, #0]
 8001f04:	685b      	ldreq	r3, [r3, #4]
 8001f06:	6063      	str	r3, [r4, #4]
 8001f08:	bf04      	itt	eq
 8001f0a:	1852      	addeq	r2, r2, r1
 8001f0c:	6022      	streq	r2, [r4, #0]
 8001f0e:	6004      	str	r4, [r0, #0]
 8001f10:	e7ec      	b.n	8001eec <_free_r+0x24>
 8001f12:	461a      	mov	r2, r3
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	b10b      	cbz	r3, 8001f1c <_free_r+0x54>
 8001f18:	42a3      	cmp	r3, r4
 8001f1a:	d9fa      	bls.n	8001f12 <_free_r+0x4a>
 8001f1c:	6811      	ldr	r1, [r2, #0]
 8001f1e:	1850      	adds	r0, r2, r1
 8001f20:	42a0      	cmp	r0, r4
 8001f22:	d10b      	bne.n	8001f3c <_free_r+0x74>
 8001f24:	6820      	ldr	r0, [r4, #0]
 8001f26:	4401      	add	r1, r0
 8001f28:	1850      	adds	r0, r2, r1
 8001f2a:	4283      	cmp	r3, r0
 8001f2c:	6011      	str	r1, [r2, #0]
 8001f2e:	d1dd      	bne.n	8001eec <_free_r+0x24>
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	6053      	str	r3, [r2, #4]
 8001f36:	4401      	add	r1, r0
 8001f38:	6011      	str	r1, [r2, #0]
 8001f3a:	e7d7      	b.n	8001eec <_free_r+0x24>
 8001f3c:	d902      	bls.n	8001f44 <_free_r+0x7c>
 8001f3e:	230c      	movs	r3, #12
 8001f40:	602b      	str	r3, [r5, #0]
 8001f42:	e7d3      	b.n	8001eec <_free_r+0x24>
 8001f44:	6820      	ldr	r0, [r4, #0]
 8001f46:	1821      	adds	r1, r4, r0
 8001f48:	428b      	cmp	r3, r1
 8001f4a:	bf04      	itt	eq
 8001f4c:	6819      	ldreq	r1, [r3, #0]
 8001f4e:	685b      	ldreq	r3, [r3, #4]
 8001f50:	6063      	str	r3, [r4, #4]
 8001f52:	bf04      	itt	eq
 8001f54:	1809      	addeq	r1, r1, r0
 8001f56:	6021      	streq	r1, [r4, #0]
 8001f58:	6054      	str	r4, [r2, #4]
 8001f5a:	e7c7      	b.n	8001eec <_free_r+0x24>
 8001f5c:	bd38      	pop	{r3, r4, r5, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000055c 	.word	0x2000055c

08001f64 <__sfputc_r>:
 8001f64:	6893      	ldr	r3, [r2, #8]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	b410      	push	{r4}
 8001f6c:	6093      	str	r3, [r2, #8]
 8001f6e:	da07      	bge.n	8001f80 <__sfputc_r+0x1c>
 8001f70:	6994      	ldr	r4, [r2, #24]
 8001f72:	42a3      	cmp	r3, r4
 8001f74:	db01      	blt.n	8001f7a <__sfputc_r+0x16>
 8001f76:	290a      	cmp	r1, #10
 8001f78:	d102      	bne.n	8001f80 <__sfputc_r+0x1c>
 8001f7a:	bc10      	pop	{r4}
 8001f7c:	f7ff bd7e 	b.w	8001a7c <__swbuf_r>
 8001f80:	6813      	ldr	r3, [r2, #0]
 8001f82:	1c58      	adds	r0, r3, #1
 8001f84:	6010      	str	r0, [r2, #0]
 8001f86:	7019      	strb	r1, [r3, #0]
 8001f88:	4608      	mov	r0, r1
 8001f8a:	bc10      	pop	{r4}
 8001f8c:	4770      	bx	lr

08001f8e <__sfputs_r>:
 8001f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f90:	4606      	mov	r6, r0
 8001f92:	460f      	mov	r7, r1
 8001f94:	4614      	mov	r4, r2
 8001f96:	18d5      	adds	r5, r2, r3
 8001f98:	42ac      	cmp	r4, r5
 8001f9a:	d101      	bne.n	8001fa0 <__sfputs_r+0x12>
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	e007      	b.n	8001fb0 <__sfputs_r+0x22>
 8001fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fa4:	463a      	mov	r2, r7
 8001fa6:	4630      	mov	r0, r6
 8001fa8:	f7ff ffdc 	bl	8001f64 <__sfputc_r>
 8001fac:	1c43      	adds	r3, r0, #1
 8001fae:	d1f3      	bne.n	8001f98 <__sfputs_r+0xa>
 8001fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001fb4 <_vfiprintf_r>:
 8001fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb8:	460d      	mov	r5, r1
 8001fba:	b09d      	sub	sp, #116	; 0x74
 8001fbc:	4614      	mov	r4, r2
 8001fbe:	4698      	mov	r8, r3
 8001fc0:	4606      	mov	r6, r0
 8001fc2:	b118      	cbz	r0, 8001fcc <_vfiprintf_r+0x18>
 8001fc4:	6983      	ldr	r3, [r0, #24]
 8001fc6:	b90b      	cbnz	r3, 8001fcc <_vfiprintf_r+0x18>
 8001fc8:	f7ff fbc4 	bl	8001754 <__sinit>
 8001fcc:	4b89      	ldr	r3, [pc, #548]	; (80021f4 <_vfiprintf_r+0x240>)
 8001fce:	429d      	cmp	r5, r3
 8001fd0:	d11b      	bne.n	800200a <_vfiprintf_r+0x56>
 8001fd2:	6875      	ldr	r5, [r6, #4]
 8001fd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fd6:	07d9      	lsls	r1, r3, #31
 8001fd8:	d405      	bmi.n	8001fe6 <_vfiprintf_r+0x32>
 8001fda:	89ab      	ldrh	r3, [r5, #12]
 8001fdc:	059a      	lsls	r2, r3, #22
 8001fde:	d402      	bmi.n	8001fe6 <_vfiprintf_r+0x32>
 8001fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fe2:	f7ff fc7a 	bl	80018da <__retarget_lock_acquire_recursive>
 8001fe6:	89ab      	ldrh	r3, [r5, #12]
 8001fe8:	071b      	lsls	r3, r3, #28
 8001fea:	d501      	bpl.n	8001ff0 <_vfiprintf_r+0x3c>
 8001fec:	692b      	ldr	r3, [r5, #16]
 8001fee:	b9eb      	cbnz	r3, 800202c <_vfiprintf_r+0x78>
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	4630      	mov	r0, r6
 8001ff4:	f7ff fda6 	bl	8001b44 <__swsetup_r>
 8001ff8:	b1c0      	cbz	r0, 800202c <_vfiprintf_r+0x78>
 8001ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ffc:	07dc      	lsls	r4, r3, #31
 8001ffe:	d50e      	bpl.n	800201e <_vfiprintf_r+0x6a>
 8002000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002004:	b01d      	add	sp, #116	; 0x74
 8002006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800200a:	4b7b      	ldr	r3, [pc, #492]	; (80021f8 <_vfiprintf_r+0x244>)
 800200c:	429d      	cmp	r5, r3
 800200e:	d101      	bne.n	8002014 <_vfiprintf_r+0x60>
 8002010:	68b5      	ldr	r5, [r6, #8]
 8002012:	e7df      	b.n	8001fd4 <_vfiprintf_r+0x20>
 8002014:	4b79      	ldr	r3, [pc, #484]	; (80021fc <_vfiprintf_r+0x248>)
 8002016:	429d      	cmp	r5, r3
 8002018:	bf08      	it	eq
 800201a:	68f5      	ldreq	r5, [r6, #12]
 800201c:	e7da      	b.n	8001fd4 <_vfiprintf_r+0x20>
 800201e:	89ab      	ldrh	r3, [r5, #12]
 8002020:	0598      	lsls	r0, r3, #22
 8002022:	d4ed      	bmi.n	8002000 <_vfiprintf_r+0x4c>
 8002024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002026:	f7ff fc59 	bl	80018dc <__retarget_lock_release_recursive>
 800202a:	e7e9      	b.n	8002000 <_vfiprintf_r+0x4c>
 800202c:	2300      	movs	r3, #0
 800202e:	9309      	str	r3, [sp, #36]	; 0x24
 8002030:	2320      	movs	r3, #32
 8002032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002036:	f8cd 800c 	str.w	r8, [sp, #12]
 800203a:	2330      	movs	r3, #48	; 0x30
 800203c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002200 <_vfiprintf_r+0x24c>
 8002040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002044:	f04f 0901 	mov.w	r9, #1
 8002048:	4623      	mov	r3, r4
 800204a:	469a      	mov	sl, r3
 800204c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002050:	b10a      	cbz	r2, 8002056 <_vfiprintf_r+0xa2>
 8002052:	2a25      	cmp	r2, #37	; 0x25
 8002054:	d1f9      	bne.n	800204a <_vfiprintf_r+0x96>
 8002056:	ebba 0b04 	subs.w	fp, sl, r4
 800205a:	d00b      	beq.n	8002074 <_vfiprintf_r+0xc0>
 800205c:	465b      	mov	r3, fp
 800205e:	4622      	mov	r2, r4
 8002060:	4629      	mov	r1, r5
 8002062:	4630      	mov	r0, r6
 8002064:	f7ff ff93 	bl	8001f8e <__sfputs_r>
 8002068:	3001      	adds	r0, #1
 800206a:	f000 80aa 	beq.w	80021c2 <_vfiprintf_r+0x20e>
 800206e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002070:	445a      	add	r2, fp
 8002072:	9209      	str	r2, [sp, #36]	; 0x24
 8002074:	f89a 3000 	ldrb.w	r3, [sl]
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80a2 	beq.w	80021c2 <_vfiprintf_r+0x20e>
 800207e:	2300      	movs	r3, #0
 8002080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002088:	f10a 0a01 	add.w	sl, sl, #1
 800208c:	9304      	str	r3, [sp, #16]
 800208e:	9307      	str	r3, [sp, #28]
 8002090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002094:	931a      	str	r3, [sp, #104]	; 0x68
 8002096:	4654      	mov	r4, sl
 8002098:	2205      	movs	r2, #5
 800209a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800209e:	4858      	ldr	r0, [pc, #352]	; (8002200 <_vfiprintf_r+0x24c>)
 80020a0:	f7fe f8c6 	bl	8000230 <memchr>
 80020a4:	9a04      	ldr	r2, [sp, #16]
 80020a6:	b9d8      	cbnz	r0, 80020e0 <_vfiprintf_r+0x12c>
 80020a8:	06d1      	lsls	r1, r2, #27
 80020aa:	bf44      	itt	mi
 80020ac:	2320      	movmi	r3, #32
 80020ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020b2:	0713      	lsls	r3, r2, #28
 80020b4:	bf44      	itt	mi
 80020b6:	232b      	movmi	r3, #43	; 0x2b
 80020b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020bc:	f89a 3000 	ldrb.w	r3, [sl]
 80020c0:	2b2a      	cmp	r3, #42	; 0x2a
 80020c2:	d015      	beq.n	80020f0 <_vfiprintf_r+0x13c>
 80020c4:	9a07      	ldr	r2, [sp, #28]
 80020c6:	4654      	mov	r4, sl
 80020c8:	2000      	movs	r0, #0
 80020ca:	f04f 0c0a 	mov.w	ip, #10
 80020ce:	4621      	mov	r1, r4
 80020d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020d4:	3b30      	subs	r3, #48	; 0x30
 80020d6:	2b09      	cmp	r3, #9
 80020d8:	d94e      	bls.n	8002178 <_vfiprintf_r+0x1c4>
 80020da:	b1b0      	cbz	r0, 800210a <_vfiprintf_r+0x156>
 80020dc:	9207      	str	r2, [sp, #28]
 80020de:	e014      	b.n	800210a <_vfiprintf_r+0x156>
 80020e0:	eba0 0308 	sub.w	r3, r0, r8
 80020e4:	fa09 f303 	lsl.w	r3, r9, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	9304      	str	r3, [sp, #16]
 80020ec:	46a2      	mov	sl, r4
 80020ee:	e7d2      	b.n	8002096 <_vfiprintf_r+0xe2>
 80020f0:	9b03      	ldr	r3, [sp, #12]
 80020f2:	1d19      	adds	r1, r3, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	9103      	str	r1, [sp, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bfbb      	ittet	lt
 80020fc:	425b      	neglt	r3, r3
 80020fe:	f042 0202 	orrlt.w	r2, r2, #2
 8002102:	9307      	strge	r3, [sp, #28]
 8002104:	9307      	strlt	r3, [sp, #28]
 8002106:	bfb8      	it	lt
 8002108:	9204      	strlt	r2, [sp, #16]
 800210a:	7823      	ldrb	r3, [r4, #0]
 800210c:	2b2e      	cmp	r3, #46	; 0x2e
 800210e:	d10c      	bne.n	800212a <_vfiprintf_r+0x176>
 8002110:	7863      	ldrb	r3, [r4, #1]
 8002112:	2b2a      	cmp	r3, #42	; 0x2a
 8002114:	d135      	bne.n	8002182 <_vfiprintf_r+0x1ce>
 8002116:	9b03      	ldr	r3, [sp, #12]
 8002118:	1d1a      	adds	r2, r3, #4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	9203      	str	r2, [sp, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	bfb8      	it	lt
 8002122:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002126:	3402      	adds	r4, #2
 8002128:	9305      	str	r3, [sp, #20]
 800212a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002210 <_vfiprintf_r+0x25c>
 800212e:	7821      	ldrb	r1, [r4, #0]
 8002130:	2203      	movs	r2, #3
 8002132:	4650      	mov	r0, sl
 8002134:	f7fe f87c 	bl	8000230 <memchr>
 8002138:	b140      	cbz	r0, 800214c <_vfiprintf_r+0x198>
 800213a:	2340      	movs	r3, #64	; 0x40
 800213c:	eba0 000a 	sub.w	r0, r0, sl
 8002140:	fa03 f000 	lsl.w	r0, r3, r0
 8002144:	9b04      	ldr	r3, [sp, #16]
 8002146:	4303      	orrs	r3, r0
 8002148:	3401      	adds	r4, #1
 800214a:	9304      	str	r3, [sp, #16]
 800214c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002150:	482c      	ldr	r0, [pc, #176]	; (8002204 <_vfiprintf_r+0x250>)
 8002152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002156:	2206      	movs	r2, #6
 8002158:	f7fe f86a 	bl	8000230 <memchr>
 800215c:	2800      	cmp	r0, #0
 800215e:	d03f      	beq.n	80021e0 <_vfiprintf_r+0x22c>
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <_vfiprintf_r+0x254>)
 8002162:	bb1b      	cbnz	r3, 80021ac <_vfiprintf_r+0x1f8>
 8002164:	9b03      	ldr	r3, [sp, #12]
 8002166:	3307      	adds	r3, #7
 8002168:	f023 0307 	bic.w	r3, r3, #7
 800216c:	3308      	adds	r3, #8
 800216e:	9303      	str	r3, [sp, #12]
 8002170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002172:	443b      	add	r3, r7
 8002174:	9309      	str	r3, [sp, #36]	; 0x24
 8002176:	e767      	b.n	8002048 <_vfiprintf_r+0x94>
 8002178:	fb0c 3202 	mla	r2, ip, r2, r3
 800217c:	460c      	mov	r4, r1
 800217e:	2001      	movs	r0, #1
 8002180:	e7a5      	b.n	80020ce <_vfiprintf_r+0x11a>
 8002182:	2300      	movs	r3, #0
 8002184:	3401      	adds	r4, #1
 8002186:	9305      	str	r3, [sp, #20]
 8002188:	4619      	mov	r1, r3
 800218a:	f04f 0c0a 	mov.w	ip, #10
 800218e:	4620      	mov	r0, r4
 8002190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002194:	3a30      	subs	r2, #48	; 0x30
 8002196:	2a09      	cmp	r2, #9
 8002198:	d903      	bls.n	80021a2 <_vfiprintf_r+0x1ee>
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0c5      	beq.n	800212a <_vfiprintf_r+0x176>
 800219e:	9105      	str	r1, [sp, #20]
 80021a0:	e7c3      	b.n	800212a <_vfiprintf_r+0x176>
 80021a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80021a6:	4604      	mov	r4, r0
 80021a8:	2301      	movs	r3, #1
 80021aa:	e7f0      	b.n	800218e <_vfiprintf_r+0x1da>
 80021ac:	ab03      	add	r3, sp, #12
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	462a      	mov	r2, r5
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <_vfiprintf_r+0x258>)
 80021b4:	a904      	add	r1, sp, #16
 80021b6:	4630      	mov	r0, r6
 80021b8:	f3af 8000 	nop.w
 80021bc:	4607      	mov	r7, r0
 80021be:	1c78      	adds	r0, r7, #1
 80021c0:	d1d6      	bne.n	8002170 <_vfiprintf_r+0x1bc>
 80021c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021c4:	07d9      	lsls	r1, r3, #31
 80021c6:	d405      	bmi.n	80021d4 <_vfiprintf_r+0x220>
 80021c8:	89ab      	ldrh	r3, [r5, #12]
 80021ca:	059a      	lsls	r2, r3, #22
 80021cc:	d402      	bmi.n	80021d4 <_vfiprintf_r+0x220>
 80021ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021d0:	f7ff fb84 	bl	80018dc <__retarget_lock_release_recursive>
 80021d4:	89ab      	ldrh	r3, [r5, #12]
 80021d6:	065b      	lsls	r3, r3, #25
 80021d8:	f53f af12 	bmi.w	8002000 <_vfiprintf_r+0x4c>
 80021dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021de:	e711      	b.n	8002004 <_vfiprintf_r+0x50>
 80021e0:	ab03      	add	r3, sp, #12
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	462a      	mov	r2, r5
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <_vfiprintf_r+0x258>)
 80021e8:	a904      	add	r1, sp, #16
 80021ea:	4630      	mov	r0, r6
 80021ec:	f000 f880 	bl	80022f0 <_printf_i>
 80021f0:	e7e4      	b.n	80021bc <_vfiprintf_r+0x208>
 80021f2:	bf00      	nop
 80021f4:	08002618 	.word	0x08002618
 80021f8:	08002638 	.word	0x08002638
 80021fc:	080025f8 	.word	0x080025f8
 8002200:	0800265c 	.word	0x0800265c
 8002204:	08002666 	.word	0x08002666
 8002208:	00000000 	.word	0x00000000
 800220c:	08001f8f 	.word	0x08001f8f
 8002210:	08002662 	.word	0x08002662

08002214 <_printf_common>:
 8002214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002218:	4616      	mov	r6, r2
 800221a:	4699      	mov	r9, r3
 800221c:	688a      	ldr	r2, [r1, #8]
 800221e:	690b      	ldr	r3, [r1, #16]
 8002220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002224:	4293      	cmp	r3, r2
 8002226:	bfb8      	it	lt
 8002228:	4613      	movlt	r3, r2
 800222a:	6033      	str	r3, [r6, #0]
 800222c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002230:	4607      	mov	r7, r0
 8002232:	460c      	mov	r4, r1
 8002234:	b10a      	cbz	r2, 800223a <_printf_common+0x26>
 8002236:	3301      	adds	r3, #1
 8002238:	6033      	str	r3, [r6, #0]
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	0699      	lsls	r1, r3, #26
 800223e:	bf42      	ittt	mi
 8002240:	6833      	ldrmi	r3, [r6, #0]
 8002242:	3302      	addmi	r3, #2
 8002244:	6033      	strmi	r3, [r6, #0]
 8002246:	6825      	ldr	r5, [r4, #0]
 8002248:	f015 0506 	ands.w	r5, r5, #6
 800224c:	d106      	bne.n	800225c <_printf_common+0x48>
 800224e:	f104 0a19 	add.w	sl, r4, #25
 8002252:	68e3      	ldr	r3, [r4, #12]
 8002254:	6832      	ldr	r2, [r6, #0]
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	42ab      	cmp	r3, r5
 800225a:	dc26      	bgt.n	80022aa <_printf_common+0x96>
 800225c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002260:	1e13      	subs	r3, r2, #0
 8002262:	6822      	ldr	r2, [r4, #0]
 8002264:	bf18      	it	ne
 8002266:	2301      	movne	r3, #1
 8002268:	0692      	lsls	r2, r2, #26
 800226a:	d42b      	bmi.n	80022c4 <_printf_common+0xb0>
 800226c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002270:	4649      	mov	r1, r9
 8002272:	4638      	mov	r0, r7
 8002274:	47c0      	blx	r8
 8002276:	3001      	adds	r0, #1
 8002278:	d01e      	beq.n	80022b8 <_printf_common+0xa4>
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	68e5      	ldr	r5, [r4, #12]
 800227e:	6832      	ldr	r2, [r6, #0]
 8002280:	f003 0306 	and.w	r3, r3, #6
 8002284:	2b04      	cmp	r3, #4
 8002286:	bf08      	it	eq
 8002288:	1aad      	subeq	r5, r5, r2
 800228a:	68a3      	ldr	r3, [r4, #8]
 800228c:	6922      	ldr	r2, [r4, #16]
 800228e:	bf0c      	ite	eq
 8002290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002294:	2500      	movne	r5, #0
 8002296:	4293      	cmp	r3, r2
 8002298:	bfc4      	itt	gt
 800229a:	1a9b      	subgt	r3, r3, r2
 800229c:	18ed      	addgt	r5, r5, r3
 800229e:	2600      	movs	r6, #0
 80022a0:	341a      	adds	r4, #26
 80022a2:	42b5      	cmp	r5, r6
 80022a4:	d11a      	bne.n	80022dc <_printf_common+0xc8>
 80022a6:	2000      	movs	r0, #0
 80022a8:	e008      	b.n	80022bc <_printf_common+0xa8>
 80022aa:	2301      	movs	r3, #1
 80022ac:	4652      	mov	r2, sl
 80022ae:	4649      	mov	r1, r9
 80022b0:	4638      	mov	r0, r7
 80022b2:	47c0      	blx	r8
 80022b4:	3001      	adds	r0, #1
 80022b6:	d103      	bne.n	80022c0 <_printf_common+0xac>
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022c0:	3501      	adds	r5, #1
 80022c2:	e7c6      	b.n	8002252 <_printf_common+0x3e>
 80022c4:	18e1      	adds	r1, r4, r3
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	2030      	movs	r0, #48	; 0x30
 80022ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022ce:	4422      	add	r2, r4
 80022d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022d8:	3302      	adds	r3, #2
 80022da:	e7c7      	b.n	800226c <_printf_common+0x58>
 80022dc:	2301      	movs	r3, #1
 80022de:	4622      	mov	r2, r4
 80022e0:	4649      	mov	r1, r9
 80022e2:	4638      	mov	r0, r7
 80022e4:	47c0      	blx	r8
 80022e6:	3001      	adds	r0, #1
 80022e8:	d0e6      	beq.n	80022b8 <_printf_common+0xa4>
 80022ea:	3601      	adds	r6, #1
 80022ec:	e7d9      	b.n	80022a2 <_printf_common+0x8e>
	...

080022f0 <_printf_i>:
 80022f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022f4:	460c      	mov	r4, r1
 80022f6:	4691      	mov	r9, r2
 80022f8:	7e27      	ldrb	r7, [r4, #24]
 80022fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80022fc:	2f78      	cmp	r7, #120	; 0x78
 80022fe:	4680      	mov	r8, r0
 8002300:	469a      	mov	sl, r3
 8002302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002306:	d807      	bhi.n	8002318 <_printf_i+0x28>
 8002308:	2f62      	cmp	r7, #98	; 0x62
 800230a:	d80a      	bhi.n	8002322 <_printf_i+0x32>
 800230c:	2f00      	cmp	r7, #0
 800230e:	f000 80d8 	beq.w	80024c2 <_printf_i+0x1d2>
 8002312:	2f58      	cmp	r7, #88	; 0x58
 8002314:	f000 80a3 	beq.w	800245e <_printf_i+0x16e>
 8002318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800231c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002320:	e03a      	b.n	8002398 <_printf_i+0xa8>
 8002322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002326:	2b15      	cmp	r3, #21
 8002328:	d8f6      	bhi.n	8002318 <_printf_i+0x28>
 800232a:	a001      	add	r0, pc, #4	; (adr r0, 8002330 <_printf_i+0x40>)
 800232c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002330:	08002389 	.word	0x08002389
 8002334:	0800239d 	.word	0x0800239d
 8002338:	08002319 	.word	0x08002319
 800233c:	08002319 	.word	0x08002319
 8002340:	08002319 	.word	0x08002319
 8002344:	08002319 	.word	0x08002319
 8002348:	0800239d 	.word	0x0800239d
 800234c:	08002319 	.word	0x08002319
 8002350:	08002319 	.word	0x08002319
 8002354:	08002319 	.word	0x08002319
 8002358:	08002319 	.word	0x08002319
 800235c:	080024a9 	.word	0x080024a9
 8002360:	080023cd 	.word	0x080023cd
 8002364:	0800248b 	.word	0x0800248b
 8002368:	08002319 	.word	0x08002319
 800236c:	08002319 	.word	0x08002319
 8002370:	080024cb 	.word	0x080024cb
 8002374:	08002319 	.word	0x08002319
 8002378:	080023cd 	.word	0x080023cd
 800237c:	08002319 	.word	0x08002319
 8002380:	08002319 	.word	0x08002319
 8002384:	08002493 	.word	0x08002493
 8002388:	680b      	ldr	r3, [r1, #0]
 800238a:	1d1a      	adds	r2, r3, #4
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	600a      	str	r2, [r1, #0]
 8002390:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002398:	2301      	movs	r3, #1
 800239a:	e0a3      	b.n	80024e4 <_printf_i+0x1f4>
 800239c:	6825      	ldr	r5, [r4, #0]
 800239e:	6808      	ldr	r0, [r1, #0]
 80023a0:	062e      	lsls	r6, r5, #24
 80023a2:	f100 0304 	add.w	r3, r0, #4
 80023a6:	d50a      	bpl.n	80023be <_printf_i+0xce>
 80023a8:	6805      	ldr	r5, [r0, #0]
 80023aa:	600b      	str	r3, [r1, #0]
 80023ac:	2d00      	cmp	r5, #0
 80023ae:	da03      	bge.n	80023b8 <_printf_i+0xc8>
 80023b0:	232d      	movs	r3, #45	; 0x2d
 80023b2:	426d      	negs	r5, r5
 80023b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023b8:	485e      	ldr	r0, [pc, #376]	; (8002534 <_printf_i+0x244>)
 80023ba:	230a      	movs	r3, #10
 80023bc:	e019      	b.n	80023f2 <_printf_i+0x102>
 80023be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80023c2:	6805      	ldr	r5, [r0, #0]
 80023c4:	600b      	str	r3, [r1, #0]
 80023c6:	bf18      	it	ne
 80023c8:	b22d      	sxthne	r5, r5
 80023ca:	e7ef      	b.n	80023ac <_printf_i+0xbc>
 80023cc:	680b      	ldr	r3, [r1, #0]
 80023ce:	6825      	ldr	r5, [r4, #0]
 80023d0:	1d18      	adds	r0, r3, #4
 80023d2:	6008      	str	r0, [r1, #0]
 80023d4:	0628      	lsls	r0, r5, #24
 80023d6:	d501      	bpl.n	80023dc <_printf_i+0xec>
 80023d8:	681d      	ldr	r5, [r3, #0]
 80023da:	e002      	b.n	80023e2 <_printf_i+0xf2>
 80023dc:	0669      	lsls	r1, r5, #25
 80023de:	d5fb      	bpl.n	80023d8 <_printf_i+0xe8>
 80023e0:	881d      	ldrh	r5, [r3, #0]
 80023e2:	4854      	ldr	r0, [pc, #336]	; (8002534 <_printf_i+0x244>)
 80023e4:	2f6f      	cmp	r7, #111	; 0x6f
 80023e6:	bf0c      	ite	eq
 80023e8:	2308      	moveq	r3, #8
 80023ea:	230a      	movne	r3, #10
 80023ec:	2100      	movs	r1, #0
 80023ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023f2:	6866      	ldr	r6, [r4, #4]
 80023f4:	60a6      	str	r6, [r4, #8]
 80023f6:	2e00      	cmp	r6, #0
 80023f8:	bfa2      	ittt	ge
 80023fa:	6821      	ldrge	r1, [r4, #0]
 80023fc:	f021 0104 	bicge.w	r1, r1, #4
 8002400:	6021      	strge	r1, [r4, #0]
 8002402:	b90d      	cbnz	r5, 8002408 <_printf_i+0x118>
 8002404:	2e00      	cmp	r6, #0
 8002406:	d04d      	beq.n	80024a4 <_printf_i+0x1b4>
 8002408:	4616      	mov	r6, r2
 800240a:	fbb5 f1f3 	udiv	r1, r5, r3
 800240e:	fb03 5711 	mls	r7, r3, r1, r5
 8002412:	5dc7      	ldrb	r7, [r0, r7]
 8002414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002418:	462f      	mov	r7, r5
 800241a:	42bb      	cmp	r3, r7
 800241c:	460d      	mov	r5, r1
 800241e:	d9f4      	bls.n	800240a <_printf_i+0x11a>
 8002420:	2b08      	cmp	r3, #8
 8002422:	d10b      	bne.n	800243c <_printf_i+0x14c>
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	07df      	lsls	r7, r3, #31
 8002428:	d508      	bpl.n	800243c <_printf_i+0x14c>
 800242a:	6923      	ldr	r3, [r4, #16]
 800242c:	6861      	ldr	r1, [r4, #4]
 800242e:	4299      	cmp	r1, r3
 8002430:	bfde      	ittt	le
 8002432:	2330      	movle	r3, #48	; 0x30
 8002434:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002438:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800243c:	1b92      	subs	r2, r2, r6
 800243e:	6122      	str	r2, [r4, #16]
 8002440:	f8cd a000 	str.w	sl, [sp]
 8002444:	464b      	mov	r3, r9
 8002446:	aa03      	add	r2, sp, #12
 8002448:	4621      	mov	r1, r4
 800244a:	4640      	mov	r0, r8
 800244c:	f7ff fee2 	bl	8002214 <_printf_common>
 8002450:	3001      	adds	r0, #1
 8002452:	d14c      	bne.n	80024ee <_printf_i+0x1fe>
 8002454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002458:	b004      	add	sp, #16
 800245a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800245e:	4835      	ldr	r0, [pc, #212]	; (8002534 <_printf_i+0x244>)
 8002460:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	680e      	ldr	r6, [r1, #0]
 8002468:	061f      	lsls	r7, r3, #24
 800246a:	f856 5b04 	ldr.w	r5, [r6], #4
 800246e:	600e      	str	r6, [r1, #0]
 8002470:	d514      	bpl.n	800249c <_printf_i+0x1ac>
 8002472:	07d9      	lsls	r1, r3, #31
 8002474:	bf44      	itt	mi
 8002476:	f043 0320 	orrmi.w	r3, r3, #32
 800247a:	6023      	strmi	r3, [r4, #0]
 800247c:	b91d      	cbnz	r5, 8002486 <_printf_i+0x196>
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	f023 0320 	bic.w	r3, r3, #32
 8002484:	6023      	str	r3, [r4, #0]
 8002486:	2310      	movs	r3, #16
 8002488:	e7b0      	b.n	80023ec <_printf_i+0xfc>
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	f043 0320 	orr.w	r3, r3, #32
 8002490:	6023      	str	r3, [r4, #0]
 8002492:	2378      	movs	r3, #120	; 0x78
 8002494:	4828      	ldr	r0, [pc, #160]	; (8002538 <_printf_i+0x248>)
 8002496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800249a:	e7e3      	b.n	8002464 <_printf_i+0x174>
 800249c:	065e      	lsls	r6, r3, #25
 800249e:	bf48      	it	mi
 80024a0:	b2ad      	uxthmi	r5, r5
 80024a2:	e7e6      	b.n	8002472 <_printf_i+0x182>
 80024a4:	4616      	mov	r6, r2
 80024a6:	e7bb      	b.n	8002420 <_printf_i+0x130>
 80024a8:	680b      	ldr	r3, [r1, #0]
 80024aa:	6826      	ldr	r6, [r4, #0]
 80024ac:	6960      	ldr	r0, [r4, #20]
 80024ae:	1d1d      	adds	r5, r3, #4
 80024b0:	600d      	str	r5, [r1, #0]
 80024b2:	0635      	lsls	r5, r6, #24
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	d501      	bpl.n	80024bc <_printf_i+0x1cc>
 80024b8:	6018      	str	r0, [r3, #0]
 80024ba:	e002      	b.n	80024c2 <_printf_i+0x1d2>
 80024bc:	0671      	lsls	r1, r6, #25
 80024be:	d5fb      	bpl.n	80024b8 <_printf_i+0x1c8>
 80024c0:	8018      	strh	r0, [r3, #0]
 80024c2:	2300      	movs	r3, #0
 80024c4:	6123      	str	r3, [r4, #16]
 80024c6:	4616      	mov	r6, r2
 80024c8:	e7ba      	b.n	8002440 <_printf_i+0x150>
 80024ca:	680b      	ldr	r3, [r1, #0]
 80024cc:	1d1a      	adds	r2, r3, #4
 80024ce:	600a      	str	r2, [r1, #0]
 80024d0:	681e      	ldr	r6, [r3, #0]
 80024d2:	6862      	ldr	r2, [r4, #4]
 80024d4:	2100      	movs	r1, #0
 80024d6:	4630      	mov	r0, r6
 80024d8:	f7fd feaa 	bl	8000230 <memchr>
 80024dc:	b108      	cbz	r0, 80024e2 <_printf_i+0x1f2>
 80024de:	1b80      	subs	r0, r0, r6
 80024e0:	6060      	str	r0, [r4, #4]
 80024e2:	6863      	ldr	r3, [r4, #4]
 80024e4:	6123      	str	r3, [r4, #16]
 80024e6:	2300      	movs	r3, #0
 80024e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024ec:	e7a8      	b.n	8002440 <_printf_i+0x150>
 80024ee:	6923      	ldr	r3, [r4, #16]
 80024f0:	4632      	mov	r2, r6
 80024f2:	4649      	mov	r1, r9
 80024f4:	4640      	mov	r0, r8
 80024f6:	47d0      	blx	sl
 80024f8:	3001      	adds	r0, #1
 80024fa:	d0ab      	beq.n	8002454 <_printf_i+0x164>
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	079b      	lsls	r3, r3, #30
 8002500:	d413      	bmi.n	800252a <_printf_i+0x23a>
 8002502:	68e0      	ldr	r0, [r4, #12]
 8002504:	9b03      	ldr	r3, [sp, #12]
 8002506:	4298      	cmp	r0, r3
 8002508:	bfb8      	it	lt
 800250a:	4618      	movlt	r0, r3
 800250c:	e7a4      	b.n	8002458 <_printf_i+0x168>
 800250e:	2301      	movs	r3, #1
 8002510:	4632      	mov	r2, r6
 8002512:	4649      	mov	r1, r9
 8002514:	4640      	mov	r0, r8
 8002516:	47d0      	blx	sl
 8002518:	3001      	adds	r0, #1
 800251a:	d09b      	beq.n	8002454 <_printf_i+0x164>
 800251c:	3501      	adds	r5, #1
 800251e:	68e3      	ldr	r3, [r4, #12]
 8002520:	9903      	ldr	r1, [sp, #12]
 8002522:	1a5b      	subs	r3, r3, r1
 8002524:	42ab      	cmp	r3, r5
 8002526:	dcf2      	bgt.n	800250e <_printf_i+0x21e>
 8002528:	e7eb      	b.n	8002502 <_printf_i+0x212>
 800252a:	2500      	movs	r5, #0
 800252c:	f104 0619 	add.w	r6, r4, #25
 8002530:	e7f5      	b.n	800251e <_printf_i+0x22e>
 8002532:	bf00      	nop
 8002534:	0800266d 	.word	0x0800266d
 8002538:	0800267e 	.word	0x0800267e

0800253c <_read_r>:
 800253c:	b538      	push	{r3, r4, r5, lr}
 800253e:	4d07      	ldr	r5, [pc, #28]	; (800255c <_read_r+0x20>)
 8002540:	4604      	mov	r4, r0
 8002542:	4608      	mov	r0, r1
 8002544:	4611      	mov	r1, r2
 8002546:	2200      	movs	r2, #0
 8002548:	602a      	str	r2, [r5, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	f7fe fe46 	bl	80011dc <_read>
 8002550:	1c43      	adds	r3, r0, #1
 8002552:	d102      	bne.n	800255a <_read_r+0x1e>
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	b103      	cbz	r3, 800255a <_read_r+0x1e>
 8002558:	6023      	str	r3, [r4, #0]
 800255a:	bd38      	pop	{r3, r4, r5, pc}
 800255c:	20000594 	.word	0x20000594

08002560 <_fstat_r>:
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	4d07      	ldr	r5, [pc, #28]	; (8002580 <_fstat_r+0x20>)
 8002564:	2300      	movs	r3, #0
 8002566:	4604      	mov	r4, r0
 8002568:	4608      	mov	r0, r1
 800256a:	4611      	mov	r1, r2
 800256c:	602b      	str	r3, [r5, #0]
 800256e:	f7fe ff12 	bl	8001396 <_fstat>
 8002572:	1c43      	adds	r3, r0, #1
 8002574:	d102      	bne.n	800257c <_fstat_r+0x1c>
 8002576:	682b      	ldr	r3, [r5, #0]
 8002578:	b103      	cbz	r3, 800257c <_fstat_r+0x1c>
 800257a:	6023      	str	r3, [r4, #0]
 800257c:	bd38      	pop	{r3, r4, r5, pc}
 800257e:	bf00      	nop
 8002580:	20000594 	.word	0x20000594

08002584 <_isatty_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4d06      	ldr	r5, [pc, #24]	; (80025a0 <_isatty_r+0x1c>)
 8002588:	2300      	movs	r3, #0
 800258a:	4604      	mov	r4, r0
 800258c:	4608      	mov	r0, r1
 800258e:	602b      	str	r3, [r5, #0]
 8002590:	f7ff f866 	bl	8001660 <_isatty>
 8002594:	1c43      	adds	r3, r0, #1
 8002596:	d102      	bne.n	800259e <_isatty_r+0x1a>
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	b103      	cbz	r3, 800259e <_isatty_r+0x1a>
 800259c:	6023      	str	r3, [r4, #0]
 800259e:	bd38      	pop	{r3, r4, r5, pc}
 80025a0:	20000594 	.word	0x20000594

080025a4 <_init>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	bf00      	nop
 80025a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025aa:	bc08      	pop	{r3}
 80025ac:	469e      	mov	lr, r3
 80025ae:	4770      	bx	lr

080025b0 <_fini>:
 80025b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b2:	bf00      	nop
 80025b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b6:	bc08      	pop	{r3}
 80025b8:	469e      	mov	lr, r3
 80025ba:	4770      	bx	lr
